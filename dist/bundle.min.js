/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/ts/factory/cube.ts":
/*!********************************!*\
  !*** ./src/ts/factory/cube.ts ***!
  \********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
var cube_1 = __importDefault(__webpack_require__(/*! ../widgets/cube */ "./src/ts/widgets/cube.ts"));
var point_1 = __importDefault(__webpack_require__(/*! ./point */ "./src/ts/factory/point.ts"));
var CubeFactory = /** @class */ (function () {
    function CubeFactory() {
    }
    CubeFactory.create = function (relationPos, pos) {
        if (pos === void 0) { pos = point_1.default.createMin(); }
        return new cube_1.default(relationPos, pos);
    };
    return CubeFactory;
}());
exports.default = CubeFactory;


/***/ }),

/***/ "./src/ts/factory/gameWindow.ts":
/*!**************************************!*\
  !*** ./src/ts/factory/gameWindow.ts ***!
  \**************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
var gameWindow_1 = __webpack_require__(/*! ../game/concrete/gameWindow */ "./src/ts/game/concrete/gameWindow.ts");
var GameWindowFactory = /** @class */ (function () {
    function GameWindowFactory() {
    }
    GameWindowFactory.create = function (type) {
        var _a;
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        //輸入的類別名稱為store紀錄的屬性時生成對應的Tetris
        var gameWindow = new ((_a = gameWindow_1.Types[type]).bind.apply(_a, __spreadArrays([void 0], args)))();
        return gameWindow;
    };
    return GameWindowFactory;
}());
exports.default = GameWindowFactory;


/***/ }),

/***/ "./src/ts/factory/point.ts":
/*!*********************************!*\
  !*** ./src/ts/factory/point.ts ***!
  \*********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
var point_1 = __importDefault(__webpack_require__(/*! ../util/point */ "./src/ts/util/point.ts"));
var PointFactory = /** @class */ (function () {
    function PointFactory() {
    }
    PointFactory.create = function (x, y) {
        return new point_1.default(x, y);
    };
    PointFactory.createByPoint = function (p) {
        var x = p.x, y = p.y;
        return new point_1.default(x, y);
    };
    PointFactory.createMin = function () {
        return new point_1.default(Number.MIN_SAFE_INTEGER, Number.MIN_SAFE_INTEGER);
    };
    return PointFactory;
}());
exports.default = PointFactory;


/***/ }),

/***/ "./src/ts/factory/tetris.ts":
/*!**********************************!*\
  !*** ./src/ts/factory/tetris.ts ***!
  \**********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
var tetrises_1 = __webpack_require__(/*! ../widgets/concrete/tetrises */ "./src/ts/widgets/concrete/tetrises.ts");
var point_1 = __importDefault(__webpack_require__(/*! ./point */ "./src/ts/factory/point.ts"));
var TetrisFactory = /** @class */ (function () {
    function TetrisFactory() {
    }
    TetrisFactory.create = function (tetrisType) {
        //輸入的類別名稱為store紀錄的屬性時生成對應的Tetris
        var tetris = new tetrises_1.Types[tetrisType]();
        return tetris;
    };
    TetrisFactory.createRandom = function (sceneColumn) {
        var tetris = TetrisFactory.randomPickTetris();
        var x = Math.floor(sceneColumn / 2 - tetris.width / 2);
        tetris.randomRotateShape();
        tetris.originPos = point_1.default.create(x, 0);
        return tetris;
    };
    TetrisFactory.randomPickTetris = function () {
        var types = Object.keys(tetrises_1.Types);
        var random = Math.floor(Math.random() * types.length);
        var pick = types[random];
        return TetrisFactory.create(pick);
    };
    return TetrisFactory;
}());
exports.default = TetrisFactory;


/***/ }),

/***/ "./src/ts/game/collision.ts":
/*!**********************************!*\
  !*** ./src/ts/game/collision.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BoundaryType = void 0;
var BoundaryType;
(function (BoundaryType) {
    BoundaryType[BoundaryType["Top"] = 0] = "Top";
    BoundaryType[BoundaryType["Bottom"] = 1] = "Bottom";
    BoundaryType[BoundaryType["Left"] = 2] = "Left";
    BoundaryType[BoundaryType["Right"] = 3] = "Right";
})(BoundaryType = exports.BoundaryType || (exports.BoundaryType = {}));
var Collision = /** @class */ (function () {
    function Collision(boundary, ignore) {
        if (ignore === void 0) { ignore = []; }
        this._boundary = boundary;
        this._ignore = ignore;
    }
    Collision.prototype.isCollisionTetris = function (target, tetrises) {
        for (var i = 0; i < tetrises.length; i++) {
            var currTetris = tetrises[i];
            if (currTetris !== target) {
                for (var j = 0; j < target.nextCubes.length; j++) {
                    if (currTetris.findCubeByPos(target.nextCubes[j].pos)) {
                        return true;
                    }
                }
            }
        }
        return false;
    };
    Collision.prototype.isCollisionBoundary = function (target) {
        var _a = this._boundary, top = _a.top, bottom = _a.bottom, left = _a.left, right = _a.right;
        for (var i = 0; i < target.nextCubes.length; i++) {
            var _b = target.nextCubes[i].pos, x = _b.x, y = _b.y;
            if ((x < left && !this._ignore.includes(BoundaryType.Left)) ||
                (x > right && !this._ignore.includes(BoundaryType.Right)) ||
                (y < top && !this._ignore.includes(BoundaryType.Top)) ||
                (y > bottom && !this._ignore.includes(BoundaryType.Bottom))) {
                return true;
            }
        }
        return false;
    };
    return Collision;
}());
exports.default = Collision;


/***/ }),

/***/ "./src/ts/game/concrete/gameWindow.ts":
/*!********************************************!*\
  !*** ./src/ts/game/concrete/gameWindow.ts ***!
  \********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Types = exports.HoldWindow = exports.PrepareWindow = exports.MainWindow = void 0;
var gameWindow_1 = __importDefault(__webpack_require__(/*! ../gameWindow */ "./src/ts/game/gameWindow.ts"));
var MainWindow = /** @class */ (function (_super) {
    __extends(MainWindow, _super);
    function MainWindow() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MainWindow.prototype.renderTetris = function (tetrises) {
        var _this = this;
        this._context.strokeStyle = "#555555";
        tetrises.forEach(function (tetris) {
            tetris.cubes.forEach(function (cube) {
                if (!cube.isClear) {
                    var p = cube.pos;
                    _this._context.beginPath();
                    var x = p.x * _this._unit;
                    var y = p.y * _this._unit;
                    _this._context.rect(x, y, _this._unit, _this._unit);
                    _this._context.fillStyle = tetris.color;
                    _this._context.fill();
                    _this._context.stroke();
                }
            });
        });
    };
    MainWindow.prototype.resize = function () {
        var width = this.width * this._unit;
        var height = this.height * this._unit;
        this._canvas.setAttribute("width", width.toString());
        this._canvas.setAttribute("height", height.toString());
    };
    MainWindow.prototype.renderDefine = function (tetrises) {
        this.renderTetris(tetrises);
        this.renderGrid();
    };
    MainWindow.prototype.initialize = function () {
        this.resize();
        this.renderGrid();
    };
    return MainWindow;
}(gameWindow_1.default));
exports.MainWindow = MainWindow;
var NotGridWindow = /** @class */ (function (_super) {
    __extends(NotGridWindow, _super);
    function NotGridWindow(canvas, unit) {
        return _super.call(this, canvas, 0, 0, unit) || this;
    }
    NotGridWindow.prototype.renderTetris = function (tetrises) {
        var _this = this;
        var tetris = tetrises[0];
        this._context.strokeStyle = "#555555";
        tetris.cubes.forEach(function (cube) {
            var tp = tetris.pos;
            var p = cube.pos;
            _this._context.beginPath();
            //偏移
            var x = (p.x - tp.x) * _this._unit;
            var y = (p.y - tp.y) * _this._unit;
            _this._context.rect(x, y, _this._unit, _this._unit);
            _this._context.fillStyle = tetris.color;
            _this._context.fill();
            _this._context.stroke();
        });
    };
    NotGridWindow.prototype.resize = function (tetris) {
        var width = tetris.originWidth * this._unit;
        var height = tetris.originHeight * this._unit;
        this._canvas.setAttribute("width", width.toString());
        this._canvas.setAttribute("height", height.toString());
    };
    NotGridWindow.prototype.renderDefine = function (tetrises) {
        this.resize(tetrises[0]);
        this.renderTetris(tetrises);
    };
    return NotGridWindow;
}(gameWindow_1.default));
var PrepareWindow = /** @class */ (function (_super) {
    __extends(PrepareWindow, _super);
    function PrepareWindow() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return PrepareWindow;
}(NotGridWindow));
exports.PrepareWindow = PrepareWindow;
var HoldWindow = /** @class */ (function (_super) {
    __extends(HoldWindow, _super);
    function HoldWindow() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return HoldWindow;
}(NotGridWindow));
exports.HoldWindow = HoldWindow;
exports.Types = { MainWindow: MainWindow, PrepareWindow: PrepareWindow, HoldWindow: HoldWindow };


/***/ }),

/***/ "./src/ts/game/cubeEliminator.ts":
/*!***************************************!*\
  !*** ./src/ts/game/cubeEliminator.ts ***!
  \***************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
var array_1 = __importDefault(__webpack_require__(/*! ../helper/array */ "./src/ts/helper/array.ts"));
var CubeEliminator = /** @class */ (function () {
    function CubeEliminator() {
    }
    CubeEliminator.clear = function (sceneWidth, sceneHeight, tetrises) {
        var clearY = CubeEliminator.clearableCubes(sceneWidth, sceneHeight, tetrises);
        CubeEliminator.removeClearableTetris(tetrises);
        return clearY;
    };
    //回傳這次應clear的y座標
    CubeEliminator.clearableCubes = function (sceneWidth, sceneHeight, tetrises) {
        var count = array_1.default.create2D(sceneHeight);
        var clearY = [];
        tetrises.forEach(function (tetris) {
            tetris.cubes.forEach(function (cube) {
                //若cube沒被清除則加入
                if (!cube.isClear && cube.pos.y >= 0) {
                    count[cube.pos.y].push(cube);
                }
            });
        });
        count.forEach(function (row, r) {
            //該列都有元素
            if (row.length === sceneWidth) {
                row.forEach(function (cube) {
                    cube.isClear = true;
                });
                clearY.push(r);
            }
        });
        return clearY;
    };
    CubeEliminator.removeClearableTetris = function (tetrises) {
        tetrises.forEach(function (target) {
            var existCubes = target.cubes.filter(function (cube) {
                return cube.isClear === false;
            });
            //cube.isClear 全是 false
            if (existCubes.length === 0) {
                //移除該tetris
                tetrises = tetrises.filter(function (tetris) { return tetris !== target; });
            }
        });
    };
    return CubeEliminator;
}());
exports.default = CubeEliminator;


/***/ }),

/***/ "./src/ts/game/game.ts":
/*!*****************************!*\
  !*** ./src/ts/game/game.ts ***!
  \*****************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
var tetris_1 = __webpack_require__(/*! ../widgets/tetris */ "./src/ts/widgets/tetris.ts");
var timer_1 = __importDefault(__webpack_require__(/*! ../util/timer */ "./src/ts/util/timer.ts"));
var tetris_2 = __importDefault(__webpack_require__(/*! ../factory/tetris */ "./src/ts/factory/tetris.ts"));
var cubeEliminator_1 = __importDefault(__webpack_require__(/*! ./cubeEliminator */ "./src/ts/game/cubeEliminator.ts"));
var collision_1 = __importStar(__webpack_require__(/*! ./collision */ "./src/ts/game/collision.ts"));
var Game = /** @class */ (function () {
    function Game(gameWindow, prepareWindow, holdWindow) {
        var _this = this;
        this._downInterval = 450;
        this._renderInterval = 50;
        this._speedIncrease = 400;
        this.moveLeft = function (event) {
            if (event.key === "ArrowLeft") {
                _this._context.currTetris.left();
            }
        };
        this.moveRight = function (event) {
            if (event.key === "ArrowRight") {
                _this._context.currTetris.right();
            }
        };
        this.rotate = function (event) {
            if (event.key === "ArrowUp") {
                _this._context.currTetris.rotate();
            }
        };
        this.hold = function (event) {
            if (event.key === "c" && _this._context.canHold) {
                _this._context.canHold = false;
                if (_this._context.holdTetris) {
                    var tempCurr = _this._context.currTetris;
                    _this._context.currTetris = _this._context.holdTetris;
                    _this._context.currTetris.posInitialize();
                    _this._context.holdTetris = tempCurr;
                    _this._context.tetrises = _this._context.tetrises.filter(function (tetris) { return tetris !== _this._context.holdTetris; });
                    _this._context.tetrises.push(_this._context.currTetris);
                }
                else {
                    _this._context.holdTetris = _this._context.currTetris;
                    _this.updateCurrAndPrepare();
                    _this._context.tetrises = _this._context.tetrises.filter(function (tetris) { return tetris !== _this._context.holdTetris; });
                    _this._context.currTetris.posInitialize();
                    _this._context.holdTetris.posInitialize();
                }
                _this._holdWindow.render([_this._context.holdTetris]);
            }
        };
        this.softDrop = function (event) {
            if (event.key === "ArrowDown") {
                if (!_this._context.softDown) {
                    _this._downTimer.ms = _this._downTimer.ms - _this._speedIncrease;
                    _this._context.softDown = true;
                }
            }
        };
        this.restoreSoftDrop = function (event) {
            if (event.key === "ArrowDown") {
                if (_this._context.softDown) {
                    _this._downTimer.ms = _this._downTimer.ms + _this._speedIncrease;
                    _this._context.softDown = false;
                }
            }
        };
        this.hardDrop = function (event) {
            if (event.key === " ") {
                _this._downTimer.ms = 0;
            }
        };
        this.userKeyDownBehavior = function (event) {
            _this.moveLeft(event);
            _this.moveRight(event);
            _this.rotate(event);
            _this.softDrop(event);
            _this.hardDrop(event);
            _this.hold(event);
            _this.nextHandle();
        };
        this.userKeyUpBehavior = function (event) {
            _this.restoreSoftDrop(event);
            _this.nextHandle();
        };
        this._gameWindow = gameWindow;
        this._prepareWindow = prepareWindow;
        this._holdWindow = holdWindow;
        this._context = this.createGameContext(tetris_2.default.createRandom(this._gameWindow.width));
        this._context.tetrises.push(this._context.currTetris);
        this.initPrepareTetrises();
        this._downTimer = new timer_1.default(function () {
            _this.update();
        }, this._downInterval);
        this._renderTimer = new timer_1.default(function () {
            ;
            _this._gameWindow.render(_this._context.tetrises);
        }, this._renderInterval);
        this._collision = new collision_1.default({
            top: 0,
            bottom: gameWindow.height - 1,
            left: 0,
            right: gameWindow.width - 1
        }, [
            collision_1.BoundaryType.Top
        ]);
    }
    Game.prototype.currTetrisDown = function () {
        this._context.currTetris.down();
        this._context.isDown = true;
    };
    Game.prototype.registerUserBehavior = function () {
        document.addEventListener("keydown", this.userKeyDownBehavior);
        document.addEventListener("keyup", this.userKeyUpBehavior);
    };
    Game.prototype.removeUserBehavior = function () {
        document.removeEventListener("keydown", this.userKeyDownBehavior);
        document.removeEventListener("keyup", this.userKeyUpBehavior);
    };
    Game.prototype.update = function () {
        this.currTetrisDown();
        this.nextHandle();
        this._context.isDown = false;
    };
    Game.prototype.nextHandle = function () {
        if (!this._collision.isCollisionTetris(this._context.currTetris, this._context.tetrises) && !this._collision.isCollisionBoundary(this._context.currTetris)) {
            this._context.currTetris.update();
            return;
        }
        //collision
        if (this._context.isDown) {
            this._downTimer.ms = this._downInterval;
            //發生碰撞且tetris的cubes的y都小於0
            if (this._context.currTetris.cubes.filter(function (cube) { return cube.pos.y >= 0; }).length === 0) {
                //gameover
                this.stop();
                this._gameWindow.renderTetris(this._context.tetrises);
                this._context.gameover = true;
                alert("gameover");
                return;
            }
            //消除方塊
            this.clearCubes();
            //產生新方塊
            this.updateCurrAndPrepare();
            this._context.softDown = false;
            this._context.canHold = true;
            //剛產生就發生碰撞
            if (this._collision.isCollisionTetris(this._context.currTetris, this._context.tetrises)) {
                this.upCurrTetris(); //上移
                this._context.currTetris.update();
                this._gameWindow.renderTetris(this._context.tetrises);
            }
        }
        this._context.currTetris.back();
    };
    Game.prototype.start = function () {
        if (this._context.gameover) {
            this.initialize();
        }
        this._downTimer.start();
        this._renderTimer.start();
        this.renderPrepareWindow();
        this.registerUserBehavior();
    };
    Game.prototype.stop = function () {
        this._downTimer.stop();
        this._renderTimer.stop();
        this.removeUserBehavior();
    };
    Game.prototype.clearCubes = function () {
        this._downTimer.stop();
        var clearY = cubeEliminator_1.default.clear(this._gameWindow.width, this._gameWindow.height, this._context.tetrises);
        this._context.tetrises.forEach(function (tetris) {
            tetris.cubes.forEach(function (cube) {
                //下降量
                var down = clearY.filter(function (y) { return y > cube.pos.y; }).length;
                cube.pos = cube.pos.plusY(down);
            });
        });
        this._downTimer.start();
    };
    Game.prototype.updateCurrAndPrepare = function () {
        this._context.currTetris = this._context.prepareTetrises.shift();
        this._context.tetrises.push(this._context.currTetris);
        this._context.prepareTetrises.push(tetris_2.default.createRandom(this._gameWindow.width));
        this.renderPrepareWindow();
    };
    Game.prototype.initialize = function () {
        this._context = this.createGameContext(tetris_2.default.createRandom(this._gameWindow.width));
        this._context.tetrises.push(this._context.currTetris);
        this.initPrepareTetrises();
        this.windowInit();
        this.removeUserBehavior();
    };
    Game.prototype.createGameContext = function (curr) {
        return {
            currTetris: curr,
            tetrises: [],
            prepareTetrises: [],
            holdTetris: null,
            softDown: false,
            isDown: false,
            canHold: true,
            gameover: false,
        };
    };
    Game.prototype.windowInit = function () {
        this._gameWindow.clear();
        this._gameWindow.renderGrid();
        this._prepareWindow.forEach(function (w) { return w.clear(); });
        this._holdWindow.clear();
    };
    Game.prototype.initPrepareTetrises = function () {
        for (var i = 0; i < this._prepareWindow.length; i++) {
            this._context.prepareTetrises.push(tetris_2.default.createRandom(this._gameWindow.width));
        }
    };
    Game.prototype.renderPrepareWindow = function () {
        var _this = this;
        this._prepareWindow.forEach(function (w, i) {
            w.render([_this._context.prepareTetrises[i]]);
        });
    };
    Game.prototype.upCurrTetris = function () {
        var currTetris = this._context.currTetris;
        var shape = currTetris.currentShape;
        var width = currTetris.width, height = currTetris.height;
        //上移量 = _currShape第一行與有定義的第一行之距離
        for (var r = 0; r < height; r++) {
            for (var c = 0; c < width; c++) {
                if (shape[r][c] === tetris_1.ShapeValue.DEFINED) {
                    currTetris.pos = currTetris.pos.subtractY(r);
                    break;
                }
            }
        }
        //上移_currShape之高度 - 1
        for (var r = 0; r < height - 1; r++) {
            currTetris.up();
        }
    };
    return Game;
}());
exports.default = Game;


/***/ }),

/***/ "./src/ts/game/gameWindow.ts":
/*!***********************************!*\
  !*** ./src/ts/game/gameWindow.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
var GameWindow = /** @class */ (function () {
    function GameWindow(canvas, width, height, unit) {
        this._canvas = canvas;
        this._context = canvas.getContext("2d");
        this._width = width;
        this._height = height;
        this._unit = unit;
    }
    Object.defineProperty(GameWindow.prototype, "width", {
        get: function () {
            return this._width;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GameWindow.prototype, "height", {
        get: function () {
            return this._height;
        },
        enumerable: false,
        configurable: true
    });
    GameWindow.prototype.renderGrid = function () {
        this._context.strokeStyle = "#777777";
        for (var y = 0; y < this.height; y++) {
            this._context.beginPath();
            this._context.moveTo(0, y * this._unit + this._unit);
            this._context.lineTo(this.width * this._unit, y * this._unit + this._unit);
            this._context.stroke();
        }
        for (var x = 0; x < this.width; x++) {
            this._context.beginPath();
            this._context.moveTo(x * this._unit + this._unit, 0);
            this._context.lineTo(x * this._unit + this._unit, this._canvas.height);
            this._context.stroke();
        }
    };
    GameWindow.prototype.render = function (tetrises) {
        this.clear();
        this.renderDefine(tetrises);
    };
    GameWindow.prototype.clear = function () {
        this._context.clearRect(0, 0, this._canvas.width, this._canvas.height);
    };
    return GameWindow;
}());
exports.default = GameWindow;


/***/ }),

/***/ "./src/ts/helper/array.ts":
/*!********************************!*\
  !*** ./src/ts/helper/array.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
var ArrayHelper = /** @class */ (function () {
    function ArrayHelper() {
    }
    ArrayHelper.create2D = function (row, col, fill) {
        var arr = [];
        for (var r = 0; r < row; r++) {
            arr.push([]);
            if (col) {
                if (fill) {
                    arr[r] = new Array(col).fill(fill);
                }
            }
        }
        return arr;
    };
    return ArrayHelper;
}());
exports.default = ArrayHelper;


/***/ }),

/***/ "./src/ts/main.ts":
/*!************************!*\
  !*** ./src/ts/main.ts ***!
  \************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
var gameWindow_1 = __importDefault(__webpack_require__(/*! ./factory/gameWindow */ "./src/ts/factory/gameWindow.ts"));
var gameWindow_2 = __webpack_require__(/*! ./game/concrete/gameWindow */ "./src/ts/game/concrete/gameWindow.ts");
var game_1 = __importDefault(__webpack_require__(/*! ./game/game */ "./src/ts/game/game.ts"));
// 禁止特定按鍵觸發頁面滾動
window.addEventListener("keydown", function (event) {
    var disableKey = ["ArrowUp", "ArrowDown", "ArrowLeft", "ArrowRight", " "];
    if (disableKey.includes(event.key)) {
        event.preventDefault();
    }
});
var canvas = document.querySelector("#gameWindow");
var prepareCanvas = document.querySelectorAll("#next-area > .canvas-wrapper > canvas");
var hold = document.querySelector("#hold");
var start = document.querySelector("#start");
var stop = document.querySelector("#stop");
var reset = document.querySelector("#reset");
var unit = 20;
var unit2 = 13;
var gameWindow = gameWindow_1.default.create(gameWindow_2.MainWindow.name, canvas, 14, 24, unit);
var prepareWindows = [];
prepareCanvas.forEach(function (c) {
    c.setAttribute("height", (unit2 * 4).toString());
    c.setAttribute("height", (unit2 * 4).toString());
    prepareWindows.push(gameWindow_1.default.create(gameWindow_2.PrepareWindow.name, c, unit2));
});
hold.setAttribute("height", (unit2 * 4).toString());
hold.setAttribute("height", (unit2 * 4).toString());
var holdWindow = gameWindow_1.default.create(gameWindow_2.HoldWindow.name, hold, unit2);
gameWindow.initialize();
var game = new game_1.default(gameWindow, prepareWindows, holdWindow);
start.addEventListener("click", function () {
    game.start();
    start.style.color = "white";
    stop.style.color = "#888888";
    reset.style.color = "#888888";
});
stop.addEventListener("click", function () {
    game.stop();
    stop.style.color = "white";
    start.style.color = "#888888";
    reset.style.color = "#888888";
});
reset.addEventListener("click", function (event) {
    game.stop();
    game.initialize();
    reset.style.color = "white";
    start.style.color = "#888888";
    stop.style.color = "#888888";
});
window.addEventListener("keydown", function (event) {
    if (event.key === "p") {
        stop.click();
    }
    if (event.key === "Enter") {
        start.click();
    }
    if (event.key === "r") {
        reset.click();
    }
});


/***/ }),

/***/ "./src/ts/util/point.ts":
/*!******************************!*\
  !*** ./src/ts/util/point.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
var Point = /** @class */ (function () {
    function Point(x, y) {
        this._x = x;
        this._y = y;
    }
    Object.defineProperty(Point.prototype, "x", {
        get: function () {
            return this._x;
        },
        enumerable: false,
        configurable: true
    });
    ;
    Object.defineProperty(Point.prototype, "y", {
        get: function () {
            return this._y;
        },
        enumerable: false,
        configurable: true
    });
    Point.prototype.plus = function (p) {
        var x = this._x + p.x;
        var y = this._y + p.y;
        return new Point(x, y);
    };
    Point.prototype.plusWith = function (x, y) {
        return new Point(this._x + x, this._y + y);
    };
    Point.prototype.subtract = function (p) {
        var x = this._x - p.x;
        var y = this._y - p.y;
        return new Point(x, y);
    };
    Point.prototype.subtractWith = function (x, y) {
        return new Point(this._x - x, this._y - y);
    };
    Point.prototype.plusX = function (x) {
        return new Point(this._x + x, this.y);
    };
    Point.prototype.plusY = function (y) {
        return new Point(this.x, this._y + y);
    };
    Point.prototype.subtractX = function (x) {
        return new Point(this._x - x, this.y);
    };
    Point.prototype.subtractY = function (y) {
        return new Point(this.x, this._y - y);
    };
    Point.prototype.equal = function (p) {
        return this.x === p.x && this.y === p.y;
    };
    return Point;
}());
exports.default = Point;


/***/ }),

/***/ "./src/ts/util/timer.ts":
/*!******************************!*\
  !*** ./src/ts/util/timer.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
var Timer = /** @class */ (function () {
    function Timer(handle, ms) {
        this._timerID = null;
        this._ms = ms;
        this._handle = handle;
    }
    Object.defineProperty(Timer.prototype, "ms", {
        get: function () {
            return this._ms;
        },
        set: function (val) {
            this._ms = val;
            this.stop();
            this.start();
        },
        enumerable: false,
        configurable: true
    });
    Timer.prototype.start = function () {
        if (!this._timerID) {
            this._timerID = setInterval(this._handle, this._ms);
        }
    };
    Timer.prototype.stop = function () {
        if (this._timerID) {
            clearInterval(this._timerID);
            this._timerID = null;
        }
    };
    return Timer;
}());
exports.default = Timer;


/***/ }),

/***/ "./src/ts/widgets/concrete/tetrises.ts":
/*!*********************************************!*\
  !*** ./src/ts/widgets/concrete/tetrises.ts ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Types = exports.ZTetris = exports.TTetris = exports.STetris = exports.OTetris = exports.LTetris = exports.JTetris = exports.ITetris = void 0;
var tetris_1 = __importDefault(__webpack_require__(/*! ../tetris */ "./src/ts/widgets/tetris.ts"));
var ITetris = /** @class */ (function (_super) {
    __extends(ITetris, _super);
    function ITetris() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ITetris.prototype.colorDefine = function () {
        return "#42b0f5";
    };
    ITetris.prototype.shapeDefine = function () {
        return [
            [0, 0, 0, 0],
            [1, 1, 1, 1],
            [0, 0, 0, 0],
            [0, 0, 0, 0],
        ];
    };
    return ITetris;
}(tetris_1.default));
exports.ITetris = ITetris;
var JTetris = /** @class */ (function (_super) {
    __extends(JTetris, _super);
    function JTetris() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    JTetris.prototype.colorDefine = function () {
        return "#3874ff";
    };
    JTetris.prototype.shapeDefine = function () {
        return [
            [1, 0, 0],
            [1, 1, 1],
            [0, 0, 0],
        ];
    };
    return JTetris;
}(tetris_1.default));
exports.JTetris = JTetris;
var LTetris = /** @class */ (function (_super) {
    __extends(LTetris, _super);
    function LTetris() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    LTetris.prototype.colorDefine = function () {
        return "#ff8e24";
    };
    LTetris.prototype.shapeDefine = function () {
        return [
            [0, 0, 1],
            [1, 1, 1],
            [0, 0, 0],
        ];
    };
    return LTetris;
}(tetris_1.default));
exports.LTetris = LTetris;
var OTetris = /** @class */ (function (_super) {
    __extends(OTetris, _super);
    function OTetris() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    OTetris.prototype.colorDefine = function () {
        return "#fff242";
    };
    OTetris.prototype.shapeDefine = function () {
        return [
            [1, 1],
            [1, 1],
        ];
    };
    return OTetris;
}(tetris_1.default));
exports.OTetris = OTetris;
var STetris = /** @class */ (function (_super) {
    __extends(STetris, _super);
    function STetris() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    STetris.prototype.colorDefine = function () {
        return "#00de3f";
    };
    STetris.prototype.shapeDefine = function () {
        return [
            [0, 1, 1],
            [1, 1, 0],
            [0, 0, 0],
        ];
    };
    return STetris;
}(tetris_1.default));
exports.STetris = STetris;
var TTetris = /** @class */ (function (_super) {
    __extends(TTetris, _super);
    function TTetris() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TTetris.prototype.colorDefine = function () {
        return "#e557f7";
    };
    TTetris.prototype.shapeDefine = function () {
        return [
            [0, 1, 0],
            [1, 1, 1],
            [0, 0, 0],
        ];
    };
    return TTetris;
}(tetris_1.default));
exports.TTetris = TTetris;
var ZTetris = /** @class */ (function (_super) {
    __extends(ZTetris, _super);
    function ZTetris() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ZTetris.prototype.colorDefine = function () {
        return "#ff1f1f";
    };
    ZTetris.prototype.shapeDefine = function () {
        return [
            [1, 1, 0],
            [0, 1, 1],
            [0, 0, 0],
        ];
    };
    return ZTetris;
}(tetris_1.default));
exports.ZTetris = ZTetris;
exports.Types = {
    ITetris: ITetris,
    JTetris: JTetris,
    LTetris: LTetris,
    OTetris: OTetris,
    STetris: STetris,
    TTetris: TTetris,
    ZTetris: ZTetris
};


/***/ }),

/***/ "./src/ts/widgets/cube.ts":
/*!********************************!*\
  !*** ./src/ts/widgets/cube.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
var Cube = /** @class */ (function () {
    function Cube(relationPos, pos) {
        this.isClear = false;
        this.relationPos = relationPos;
        this.pos = pos;
    }
    return Cube;
}());
exports.default = Cube;


/***/ }),

/***/ "./src/ts/widgets/tetris.ts":
/*!**********************************!*\
  !*** ./src/ts/widgets/tetris.ts ***!
  \**********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ShapeValue = void 0;
var cube_1 = __importDefault(__webpack_require__(/*! ../factory/cube */ "./src/ts/factory/cube.ts"));
var point_1 = __importDefault(__webpack_require__(/*! ../factory/point */ "./src/ts/factory/point.ts"));
var array_1 = __importDefault(__webpack_require__(/*! ../helper/array */ "./src/ts/helper/array.ts"));
var ShapeValue;
(function (ShapeValue) {
    ShapeValue[ShapeValue["UNDEFINED"] = -1] = "UNDEFINED";
    ShapeValue[ShapeValue["DEFINED"] = 1] = "DEFINED";
    ShapeValue[ShapeValue["EMPTY"] = 0] = "EMPTY";
})(ShapeValue = exports.ShapeValue || (exports.ShapeValue = {}));
var Tetris = /** @class */ (function () {
    function Tetris() {
        this._originPos = point_1.default.createMin();
        this._pos = point_1.default.createMin();
        this._nextPos = point_1.default.createMin();
        this._cubes = [];
        this._color = this.colorDefine();
        this._originShape = this.shapeDefine();
        this._nextShape = this._originShape.slice();
        this._currentShape = this._originShape.slice();
    }
    Object.defineProperty(Tetris.prototype, "width", {
        get: function () {
            return this._currentShape[0].length;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Tetris.prototype, "height", {
        get: function () {
            return this._currentShape.length;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Tetris.prototype, "pos", {
        get: function () {
            return this._pos;
        },
        set: function (value) {
            this._pos = value;
            this._cubes = this.generateCubes(this.pos, this._currentShape);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Tetris.prototype, "originPos", {
        get: function () {
            return this._originPos;
        },
        set: function (p) {
            if (this.originPos.x === Number.MIN_SAFE_INTEGER && this.originPos.y === Number.MIN_SAFE_INTEGER) {
                this._originPos = point_1.default.createByPoint(p);
                this.pos = point_1.default.createByPoint(p);
                this._nextPos = point_1.default.createByPoint(p);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Tetris.prototype, "originWidth", {
        get: function () {
            return this._originShape[0].length;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Tetris.prototype, "originHeight", {
        get: function () {
            return this._originShape.length;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Tetris.prototype, "cubes", {
        get: function () {
            return this._cubes;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Tetris.prototype, "nextCubes", {
        get: function () {
            return this.generateCubes(this._nextPos, this._nextShape);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Tetris.prototype, "color", {
        get: function () {
            return this._color;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Tetris.prototype, "currentShape", {
        get: function () {
            return this._currentShape.slice();
        },
        enumerable: false,
        configurable: true
    });
    Tetris.prototype.generateCubes = function (pos, shape) {
        var cubes = [];
        shape.forEach(function (row, r) {
            row.forEach(function (element, c) {
                if (element === ShapeValue.DEFINED) {
                    var relationPos = point_1.default.create(c, r);
                    var position = relationPos.plus(pos);
                    cubes.push(cube_1.default.create(relationPos, position));
                }
            });
        });
        return cubes;
    };
    Tetris.prototype.findCubeByPos = function (pos, isClear) {
        if (isClear === void 0) { isClear = false; }
        var cube = this._cubes.find(function (cube) {
            return cube.pos.equal(pos) && cube.isClear === isClear;
        });
        return cube;
    };
    Tetris.prototype.findCube = function (cube) {
        return this._cubes.find(function (el) { return el === cube; });
    };
    Tetris.prototype.randomRotateShape = function () {
        var rotateTimes = Math.floor(Math.random() * 4);
        for (var i = 0; i < rotateTimes; i++) {
            this.rotate();
        }
        this._currentShape = this._nextShape.slice();
    };
    Tetris.prototype.rotate = function () {
        var row = this.height;
        var col = this.width;
        var newShape = array_1.default.create2D(col, row, ShapeValue.EMPTY);
        var newRow = 0;
        for (var r = 0; r < row; r++) {
            newRow = 0;
            for (var c = 0; c < col; c++) {
                var val = this._currentShape[r][c];
                newShape[newRow][row - r - 1] = val;
                if (val === ShapeValue.DEFINED) {
                    var originCube = this.findCubeByPos(point_1.default.create(c, r));
                    if (originCube) {
                        var newCube = cube_1.default.create(point_1.default.create(r, newRow));
                        //tetris左上角之座標 + 偏移量
                        newCube.pos = this.pos.plusWith(r, c);
                    }
                }
                newRow++;
            }
        }
        this._nextShape = newShape;
    };
    Tetris.prototype.left = function () {
        this._nextPos = this.pos.subtractX(1);
    };
    Tetris.prototype.right = function () {
        this._nextPos = this.pos.plusX(1);
    };
    Tetris.prototype.up = function () {
        this._nextPos = this.pos.subtractY(1);
    };
    Tetris.prototype.down = function () {
        this._nextPos = this.pos.plusY(1);
    };
    Tetris.prototype.update = function () {
        this._currentShape = this._nextShape.slice();
        this.pos = point_1.default.createByPoint(this._nextPos);
    };
    Tetris.prototype.back = function () {
        this._nextShape = this._currentShape.slice();
        this._nextPos = point_1.default.createByPoint(this.pos);
    };
    Tetris.prototype.posInitialize = function () {
        this.pos = point_1.default.createByPoint(this.originPos);
        this._nextPos = point_1.default.createByPoint(this.originPos);
    };
    return Tetris;
}());
exports.default = Tetris;


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		var execOptions = { id: moduleId, module: module, factory: __webpack_modules__[moduleId], require: __webpack_require__ };
/******/ 		__webpack_require__.i.forEach(function(handler) { handler(execOptions); });
/******/ 		module = execOptions.module;
/******/ 		execOptions.factory.call(module.exports, module, module.exports, execOptions.require);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = __webpack_module_cache__;
/******/ 	
/******/ 	// expose the module execution interceptor
/******/ 	__webpack_require__.i = [];
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/get javascript update chunk filename */
/******/ 	(() => {
/******/ 		// This function allow to reference all chunks
/******/ 		__webpack_require__.hu = (chunkId) => {
/******/ 			// return url for filenames based on template
/******/ 			return "" + chunkId + "." + __webpack_require__.h() + ".hot-update.js";
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/get update manifest filename */
/******/ 	(() => {
/******/ 		__webpack_require__.hmrF = () => ("main." + __webpack_require__.h() + ".hot-update.json");
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/getFullHash */
/******/ 	(() => {
/******/ 		__webpack_require__.h = () => ("aa98b216ff5702fac251")
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/load script */
/******/ 	(() => {
/******/ 		var inProgress = {};
/******/ 		var dataWebpackPrefix = "Tetris:";
/******/ 		// loadScript function to load a script via script tag
/******/ 		__webpack_require__.l = (url, done, key, chunkId) => {
/******/ 			if(inProgress[url]) { inProgress[url].push(done); return; }
/******/ 			var script, needAttach;
/******/ 			if(key !== undefined) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				for(var i = 0; i < scripts.length; i++) {
/******/ 					var s = scripts[i];
/******/ 					if(s.getAttribute("src") == url || s.getAttribute("data-webpack") == dataWebpackPrefix + key) { script = s; break; }
/******/ 				}
/******/ 			}
/******/ 			if(!script) {
/******/ 				needAttach = true;
/******/ 				script = document.createElement('script');
/******/ 		
/******/ 				script.charset = 'utf-8';
/******/ 				script.timeout = 120;
/******/ 				if (__webpack_require__.nc) {
/******/ 					script.setAttribute("nonce", __webpack_require__.nc);
/******/ 				}
/******/ 				script.setAttribute("data-webpack", dataWebpackPrefix + key);
/******/ 				script.src = url;
/******/ 			}
/******/ 			inProgress[url] = [done];
/******/ 			var onScriptComplete = (prev, event) => {
/******/ 				// avoid mem leaks in IE.
/******/ 				script.onerror = script.onload = null;
/******/ 				clearTimeout(timeout);
/******/ 				var doneFns = inProgress[url];
/******/ 				delete inProgress[url];
/******/ 				script.parentNode && script.parentNode.removeChild(script);
/******/ 				doneFns && doneFns.forEach((fn) => (fn(event)));
/******/ 				if(prev) return prev(event);
/******/ 			}
/******/ 			;
/******/ 			var timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);
/******/ 			script.onerror = onScriptComplete.bind(null, script.onerror);
/******/ 			script.onload = onScriptComplete.bind(null, script.onload);
/******/ 			needAttach && document.head.appendChild(script);
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hot module replacement */
/******/ 	(() => {
/******/ 		var currentModuleData = {};
/******/ 		var installedModules = __webpack_require__.c;
/******/ 		
/******/ 		// module and require creation
/******/ 		var currentChildModule;
/******/ 		var currentParents = [];
/******/ 		
/******/ 		// status
/******/ 		var registeredStatusHandlers = [];
/******/ 		var currentStatus = "idle";
/******/ 		
/******/ 		// while downloading
/******/ 		var blockingPromises;
/******/ 		
/******/ 		// The update info
/******/ 		var currentUpdateApplyHandlers;
/******/ 		var queuedInvalidatedModules;
/******/ 		
/******/ 		// eslint-disable-next-line no-unused-vars
/******/ 		__webpack_require__.hmrD = currentModuleData;
/******/ 		
/******/ 		__webpack_require__.i.push(function (options) {
/******/ 			var module = options.module;
/******/ 			var require = createRequire(options.require, options.id);
/******/ 			module.hot = createModuleHotObject(options.id, module);
/******/ 			module.parents = currentParents;
/******/ 			module.children = [];
/******/ 			currentParents = [];
/******/ 			options.require = require;
/******/ 		});
/******/ 		
/******/ 		__webpack_require__.hmrC = {};
/******/ 		__webpack_require__.hmrI = {};
/******/ 		
/******/ 		function createRequire(require, moduleId) {
/******/ 			var me = installedModules[moduleId];
/******/ 			if (!me) return require;
/******/ 			var fn = function (request) {
/******/ 				if (me.hot.active) {
/******/ 					if (installedModules[request]) {
/******/ 						var parents = installedModules[request].parents;
/******/ 						if (parents.indexOf(moduleId) === -1) {
/******/ 							parents.push(moduleId);
/******/ 						}
/******/ 					} else {
/******/ 						currentParents = [moduleId];
/******/ 						currentChildModule = request;
/******/ 					}
/******/ 					if (me.children.indexOf(request) === -1) {
/******/ 						me.children.push(request);
/******/ 					}
/******/ 				} else {
/******/ 					console.warn(
/******/ 						"[HMR] unexpected require(" +
/******/ 							request +
/******/ 							") from disposed module " +
/******/ 							moduleId
/******/ 					);
/******/ 					currentParents = [];
/******/ 				}
/******/ 				return require(request);
/******/ 			};
/******/ 			var createPropertyDescriptor = function (name) {
/******/ 				return {
/******/ 					configurable: true,
/******/ 					enumerable: true,
/******/ 					get: function () {
/******/ 						return require[name];
/******/ 					},
/******/ 					set: function (value) {
/******/ 						require[name] = value;
/******/ 					}
/******/ 				};
/******/ 			};
/******/ 			for (var name in require) {
/******/ 				if (Object.prototype.hasOwnProperty.call(require, name) && name !== "e") {
/******/ 					Object.defineProperty(fn, name, createPropertyDescriptor(name));
/******/ 				}
/******/ 			}
/******/ 			fn.e = function (chunkId) {
/******/ 				return trackBlockingPromise(require.e(chunkId));
/******/ 			};
/******/ 			return fn;
/******/ 		}
/******/ 		
/******/ 		function createModuleHotObject(moduleId, me) {
/******/ 			var hot = {
/******/ 				// private stuff
/******/ 				_acceptedDependencies: {},
/******/ 				_declinedDependencies: {},
/******/ 				_selfAccepted: false,
/******/ 				_selfDeclined: false,
/******/ 				_selfInvalidated: false,
/******/ 				_disposeHandlers: [],
/******/ 				_main: currentChildModule !== moduleId,
/******/ 				_requireSelf: function () {
/******/ 					currentParents = me.parents.slice();
/******/ 					currentChildModule = moduleId;
/******/ 					__webpack_require__(moduleId);
/******/ 				},
/******/ 		
/******/ 				// Module API
/******/ 				active: true,
/******/ 				accept: function (dep, callback) {
/******/ 					if (dep === undefined) hot._selfAccepted = true;
/******/ 					else if (typeof dep === "function") hot._selfAccepted = dep;
/******/ 					else if (typeof dep === "object" && dep !== null)
/******/ 						for (var i = 0; i < dep.length; i++)
/******/ 							hot._acceptedDependencies[dep[i]] = callback || function () {};
/******/ 					else hot._acceptedDependencies[dep] = callback || function () {};
/******/ 				},
/******/ 				decline: function (dep) {
/******/ 					if (dep === undefined) hot._selfDeclined = true;
/******/ 					else if (typeof dep === "object" && dep !== null)
/******/ 						for (var i = 0; i < dep.length; i++)
/******/ 							hot._declinedDependencies[dep[i]] = true;
/******/ 					else hot._declinedDependencies[dep] = true;
/******/ 				},
/******/ 				dispose: function (callback) {
/******/ 					hot._disposeHandlers.push(callback);
/******/ 				},
/******/ 				addDisposeHandler: function (callback) {
/******/ 					hot._disposeHandlers.push(callback);
/******/ 				},
/******/ 				removeDisposeHandler: function (callback) {
/******/ 					var idx = hot._disposeHandlers.indexOf(callback);
/******/ 					if (idx >= 0) hot._disposeHandlers.splice(idx, 1);
/******/ 				},
/******/ 				invalidate: function () {
/******/ 					this._selfInvalidated = true;
/******/ 					switch (currentStatus) {
/******/ 						case "idle":
/******/ 							currentUpdateApplyHandlers = [];
/******/ 							Object.keys(__webpack_require__.hmrI).forEach(function (key) {
/******/ 								__webpack_require__.hmrI[key](
/******/ 									moduleId,
/******/ 									currentUpdateApplyHandlers
/******/ 								);
/******/ 							});
/******/ 							setStatus("ready");
/******/ 							break;
/******/ 						case "ready":
/******/ 							Object.keys(__webpack_require__.hmrI).forEach(function (key) {
/******/ 								__webpack_require__.hmrI[key](
/******/ 									moduleId,
/******/ 									currentUpdateApplyHandlers
/******/ 								);
/******/ 							});
/******/ 							break;
/******/ 						case "prepare":
/******/ 						case "check":
/******/ 						case "dispose":
/******/ 						case "apply":
/******/ 							(queuedInvalidatedModules = queuedInvalidatedModules || []).push(
/******/ 								moduleId
/******/ 							);
/******/ 							break;
/******/ 						default:
/******/ 							// ignore requests in error states
/******/ 							break;
/******/ 					}
/******/ 				},
/******/ 		
/******/ 				// Management API
/******/ 				check: hotCheck,
/******/ 				apply: hotApply,
/******/ 				status: function (l) {
/******/ 					if (!l) return currentStatus;
/******/ 					registeredStatusHandlers.push(l);
/******/ 				},
/******/ 				addStatusHandler: function (l) {
/******/ 					registeredStatusHandlers.push(l);
/******/ 				},
/******/ 				removeStatusHandler: function (l) {
/******/ 					var idx = registeredStatusHandlers.indexOf(l);
/******/ 					if (idx >= 0) registeredStatusHandlers.splice(idx, 1);
/******/ 				},
/******/ 		
/******/ 				//inherit from previous dispose call
/******/ 				data: currentModuleData[moduleId]
/******/ 			};
/******/ 			currentChildModule = undefined;
/******/ 			return hot;
/******/ 		}
/******/ 		
/******/ 		function setStatus(newStatus) {
/******/ 			currentStatus = newStatus;
/******/ 			for (var i = 0; i < registeredStatusHandlers.length; i++)
/******/ 				registeredStatusHandlers[i].call(null, newStatus);
/******/ 		}
/******/ 		
/******/ 		function trackBlockingPromise(promise) {
/******/ 			switch (currentStatus) {
/******/ 				case "ready":
/******/ 					setStatus("prepare");
/******/ 					blockingPromises.push(promise);
/******/ 					waitForBlockingPromises(function () {
/******/ 						setStatus("ready");
/******/ 					});
/******/ 					return promise;
/******/ 				case "prepare":
/******/ 					blockingPromises.push(promise);
/******/ 					return promise;
/******/ 				default:
/******/ 					return promise;
/******/ 			}
/******/ 		}
/******/ 		
/******/ 		function waitForBlockingPromises(fn) {
/******/ 			if (blockingPromises.length === 0) return fn();
/******/ 			var blocker = blockingPromises;
/******/ 			blockingPromises = [];
/******/ 			return Promise.all(blocker).then(function () {
/******/ 				return waitForBlockingPromises(fn);
/******/ 			});
/******/ 		}
/******/ 		
/******/ 		function hotCheck(applyOnUpdate) {
/******/ 			if (currentStatus !== "idle") {
/******/ 				throw new Error("check() is only allowed in idle status");
/******/ 			}
/******/ 			setStatus("check");
/******/ 			return __webpack_require__.hmrM().then(function (update) {
/******/ 				if (!update) {
/******/ 					setStatus(applyInvalidatedModules() ? "ready" : "idle");
/******/ 					return null;
/******/ 				}
/******/ 		
/******/ 				setStatus("prepare");
/******/ 		
/******/ 				var updatedModules = [];
/******/ 				blockingPromises = [];
/******/ 				currentUpdateApplyHandlers = [];
/******/ 		
/******/ 				return Promise.all(
/******/ 					Object.keys(__webpack_require__.hmrC).reduce(function (
/******/ 						promises,
/******/ 						key
/******/ 					) {
/******/ 						__webpack_require__.hmrC[key](
/******/ 							update.c,
/******/ 							update.r,
/******/ 							update.m,
/******/ 							promises,
/******/ 							currentUpdateApplyHandlers,
/******/ 							updatedModules
/******/ 						);
/******/ 						return promises;
/******/ 					},
/******/ 					[])
/******/ 				).then(function () {
/******/ 					return waitForBlockingPromises(function () {
/******/ 						if (applyOnUpdate) {
/******/ 							return internalApply(applyOnUpdate);
/******/ 						} else {
/******/ 							setStatus("ready");
/******/ 		
/******/ 							return updatedModules;
/******/ 						}
/******/ 					});
/******/ 				});
/******/ 			});
/******/ 		}
/******/ 		
/******/ 		function hotApply(options) {
/******/ 			if (currentStatus !== "ready") {
/******/ 				return Promise.resolve().then(function () {
/******/ 					throw new Error("apply() is only allowed in ready status");
/******/ 				});
/******/ 			}
/******/ 			return internalApply(options);
/******/ 		}
/******/ 		
/******/ 		function internalApply(options) {
/******/ 			options = options || {};
/******/ 		
/******/ 			applyInvalidatedModules();
/******/ 		
/******/ 			var results = currentUpdateApplyHandlers.map(function (handler) {
/******/ 				return handler(options);
/******/ 			});
/******/ 			currentUpdateApplyHandlers = undefined;
/******/ 		
/******/ 			var errors = results
/******/ 				.map(function (r) {
/******/ 					return r.error;
/******/ 				})
/******/ 				.filter(Boolean);
/******/ 		
/******/ 			if (errors.length > 0) {
/******/ 				setStatus("abort");
/******/ 				return Promise.resolve().then(function () {
/******/ 					throw errors[0];
/******/ 				});
/******/ 			}
/******/ 		
/******/ 			// Now in "dispose" phase
/******/ 			setStatus("dispose");
/******/ 		
/******/ 			results.forEach(function (result) {
/******/ 				if (result.dispose) result.dispose();
/******/ 			});
/******/ 		
/******/ 			// Now in "apply" phase
/******/ 			setStatus("apply");
/******/ 		
/******/ 			var error;
/******/ 			var reportError = function (err) {
/******/ 				if (!error) error = err;
/******/ 			};
/******/ 		
/******/ 			var outdatedModules = [];
/******/ 			results.forEach(function (result) {
/******/ 				if (result.apply) {
/******/ 					var modules = result.apply(reportError);
/******/ 					if (modules) {
/******/ 						for (var i = 0; i < modules.length; i++) {
/******/ 							outdatedModules.push(modules[i]);
/******/ 						}
/******/ 					}
/******/ 				}
/******/ 			});
/******/ 		
/******/ 			// handle errors in accept handlers and self accepted module load
/******/ 			if (error) {
/******/ 				setStatus("fail");
/******/ 				return Promise.resolve().then(function () {
/******/ 					throw error;
/******/ 				});
/******/ 			}
/******/ 		
/******/ 			if (queuedInvalidatedModules) {
/******/ 				return internalApply(options).then(function (list) {
/******/ 					outdatedModules.forEach(function (moduleId) {
/******/ 						if (list.indexOf(moduleId) < 0) list.push(moduleId);
/******/ 					});
/******/ 					return list;
/******/ 				});
/******/ 			}
/******/ 		
/******/ 			setStatus("idle");
/******/ 			return Promise.resolve(outdatedModules);
/******/ 		}
/******/ 		
/******/ 		function applyInvalidatedModules() {
/******/ 			if (queuedInvalidatedModules) {
/******/ 				if (!currentUpdateApplyHandlers) currentUpdateApplyHandlers = [];
/******/ 				Object.keys(__webpack_require__.hmrI).forEach(function (key) {
/******/ 					queuedInvalidatedModules.forEach(function (moduleId) {
/******/ 						__webpack_require__.hmrI[key](
/******/ 							moduleId,
/******/ 							currentUpdateApplyHandlers
/******/ 						);
/******/ 					});
/******/ 				});
/******/ 				queuedInvalidatedModules = undefined;
/******/ 				return true;
/******/ 			}
/******/ 		}
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scriptUrl;
/******/ 		if (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + "";
/******/ 		var document = __webpack_require__.g.document;
/******/ 		if (!scriptUrl && document) {
/******/ 			if (document.currentScript)
/******/ 				scriptUrl = document.currentScript.src
/******/ 			if (!scriptUrl) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				if(scripts.length) scriptUrl = scripts[scripts.length - 1].src
/******/ 			}
/******/ 		}
/******/ 		// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration
/******/ 		// or pass an empty string ("") and set the __webpack_public_path__ variable from your code to use your own logic.
/******/ 		if (!scriptUrl) throw new Error("Automatic publicPath is not supported in this browser");
/******/ 		scriptUrl = scriptUrl.replace(/#.*$/, "").replace(/\?.*$/, "").replace(/\/[^\/]+$/, "/");
/******/ 		__webpack_require__.p = scriptUrl;
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// Promise = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"main": 0
/******/ 		};
/******/ 		
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		var currentUpdatedModulesList;
/******/ 		var waitingUpdateResolves = {};
/******/ 		function loadUpdateChunk(chunkId) {
/******/ 			return new Promise((resolve, reject) => {
/******/ 				waitingUpdateResolves[chunkId] = resolve;
/******/ 				// start update chunk loading
/******/ 				var url = __webpack_require__.p + __webpack_require__.hu(chunkId);
/******/ 				// create error before stack unwound to get useful stacktrace later
/******/ 				var error = new Error();
/******/ 				var loadingEnded = (event) => {
/******/ 					if(waitingUpdateResolves[chunkId]) {
/******/ 						waitingUpdateResolves[chunkId] = undefined
/******/ 						var errorType = event && (event.type === 'load' ? 'missing' : event.type);
/******/ 						var realSrc = event && event.target && event.target.src;
/******/ 						error.message = 'Loading hot update chunk ' + chunkId + ' failed.\n(' + errorType + ': ' + realSrc + ')';
/******/ 						error.name = 'ChunkLoadError';
/******/ 						error.type = errorType;
/******/ 						error.request = realSrc;
/******/ 						reject(error);
/******/ 					}
/******/ 				};
/******/ 				__webpack_require__.l(url, loadingEnded);
/******/ 			});
/******/ 		}
/******/ 		
/******/ 		self["webpackHotUpdateTetris"] = (chunkId, moreModules, runtime) => {
/******/ 			for(var moduleId in moreModules) {
/******/ 				if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 					currentUpdate[moduleId] = moreModules[moduleId];
/******/ 					if(currentUpdatedModulesList) currentUpdatedModulesList.push(moduleId);
/******/ 				}
/******/ 			}
/******/ 			if(runtime) currentUpdateRuntime.push(runtime);
/******/ 			if(waitingUpdateResolves[chunkId]) {
/******/ 				waitingUpdateResolves[chunkId]();
/******/ 				waitingUpdateResolves[chunkId] = undefined;
/******/ 			}
/******/ 		};
/******/ 		
/******/ 		var currentUpdateChunks;
/******/ 		var currentUpdate;
/******/ 		var currentUpdateRemovedChunks;
/******/ 		var currentUpdateRuntime;
/******/ 		function applyHandler(options) {
/******/ 			if (__webpack_require__.f) delete __webpack_require__.f.jsonpHmr;
/******/ 			currentUpdateChunks = undefined;
/******/ 			function getAffectedModuleEffects(updateModuleId) {
/******/ 				var outdatedModules = [updateModuleId];
/******/ 				var outdatedDependencies = {};
/******/ 		
/******/ 				var queue = outdatedModules.map(function (id) {
/******/ 					return {
/******/ 						chain: [id],
/******/ 						id: id
/******/ 					};
/******/ 				});
/******/ 				while (queue.length > 0) {
/******/ 					var queueItem = queue.pop();
/******/ 					var moduleId = queueItem.id;
/******/ 					var chain = queueItem.chain;
/******/ 					var module = __webpack_require__.c[moduleId];
/******/ 					if (
/******/ 						!module ||
/******/ 						(module.hot._selfAccepted && !module.hot._selfInvalidated)
/******/ 					)
/******/ 						continue;
/******/ 					if (module.hot._selfDeclined) {
/******/ 						return {
/******/ 							type: "self-declined",
/******/ 							chain: chain,
/******/ 							moduleId: moduleId
/******/ 						};
/******/ 					}
/******/ 					if (module.hot._main) {
/******/ 						return {
/******/ 							type: "unaccepted",
/******/ 							chain: chain,
/******/ 							moduleId: moduleId
/******/ 						};
/******/ 					}
/******/ 					for (var i = 0; i < module.parents.length; i++) {
/******/ 						var parentId = module.parents[i];
/******/ 						var parent = __webpack_require__.c[parentId];
/******/ 						if (!parent) continue;
/******/ 						if (parent.hot._declinedDependencies[moduleId]) {
/******/ 							return {
/******/ 								type: "declined",
/******/ 								chain: chain.concat([parentId]),
/******/ 								moduleId: moduleId,
/******/ 								parentId: parentId
/******/ 							};
/******/ 						}
/******/ 						if (outdatedModules.indexOf(parentId) !== -1) continue;
/******/ 						if (parent.hot._acceptedDependencies[moduleId]) {
/******/ 							if (!outdatedDependencies[parentId])
/******/ 								outdatedDependencies[parentId] = [];
/******/ 							addAllToSet(outdatedDependencies[parentId], [moduleId]);
/******/ 							continue;
/******/ 						}
/******/ 						delete outdatedDependencies[parentId];
/******/ 						outdatedModules.push(parentId);
/******/ 						queue.push({
/******/ 							chain: chain.concat([parentId]),
/******/ 							id: parentId
/******/ 						});
/******/ 					}
/******/ 				}
/******/ 		
/******/ 				return {
/******/ 					type: "accepted",
/******/ 					moduleId: updateModuleId,
/******/ 					outdatedModules: outdatedModules,
/******/ 					outdatedDependencies: outdatedDependencies
/******/ 				};
/******/ 			}
/******/ 		
/******/ 			function addAllToSet(a, b) {
/******/ 				for (var i = 0; i < b.length; i++) {
/******/ 					var item = b[i];
/******/ 					if (a.indexOf(item) === -1) a.push(item);
/******/ 				}
/******/ 			}
/******/ 		
/******/ 			// at begin all updates modules are outdated
/******/ 			// the "outdated" status can propagate to parents if they don't accept the children
/******/ 			var outdatedDependencies = {};
/******/ 			var outdatedModules = [];
/******/ 			var appliedUpdate = {};
/******/ 		
/******/ 			var warnUnexpectedRequire = function warnUnexpectedRequire(module) {
/******/ 				console.warn(
/******/ 					"[HMR] unexpected require(" + module.id + ") to disposed module"
/******/ 				);
/******/ 			};
/******/ 		
/******/ 			for (var moduleId in currentUpdate) {
/******/ 				if (__webpack_require__.o(currentUpdate, moduleId)) {
/******/ 					var newModuleFactory = currentUpdate[moduleId];
/******/ 					/** @type {TODO} */
/******/ 					var result;
/******/ 					if (newModuleFactory) {
/******/ 						result = getAffectedModuleEffects(moduleId);
/******/ 					} else {
/******/ 						result = {
/******/ 							type: "disposed",
/******/ 							moduleId: moduleId
/******/ 						};
/******/ 					}
/******/ 					/** @type {Error|false} */
/******/ 					var abortError = false;
/******/ 					var doApply = false;
/******/ 					var doDispose = false;
/******/ 					var chainInfo = "";
/******/ 					if (result.chain) {
/******/ 						chainInfo = "\nUpdate propagation: " + result.chain.join(" -> ");
/******/ 					}
/******/ 					switch (result.type) {
/******/ 						case "self-declined":
/******/ 							if (options.onDeclined) options.onDeclined(result);
/******/ 							if (!options.ignoreDeclined)
/******/ 								abortError = new Error(
/******/ 									"Aborted because of self decline: " +
/******/ 										result.moduleId +
/******/ 										chainInfo
/******/ 								);
/******/ 							break;
/******/ 						case "declined":
/******/ 							if (options.onDeclined) options.onDeclined(result);
/******/ 							if (!options.ignoreDeclined)
/******/ 								abortError = new Error(
/******/ 									"Aborted because of declined dependency: " +
/******/ 										result.moduleId +
/******/ 										" in " +
/******/ 										result.parentId +
/******/ 										chainInfo
/******/ 								);
/******/ 							break;
/******/ 						case "unaccepted":
/******/ 							if (options.onUnaccepted) options.onUnaccepted(result);
/******/ 							if (!options.ignoreUnaccepted)
/******/ 								abortError = new Error(
/******/ 									"Aborted because " + moduleId + " is not accepted" + chainInfo
/******/ 								);
/******/ 							break;
/******/ 						case "accepted":
/******/ 							if (options.onAccepted) options.onAccepted(result);
/******/ 							doApply = true;
/******/ 							break;
/******/ 						case "disposed":
/******/ 							if (options.onDisposed) options.onDisposed(result);
/******/ 							doDispose = true;
/******/ 							break;
/******/ 						default:
/******/ 							throw new Error("Unexception type " + result.type);
/******/ 					}
/******/ 					if (abortError) {
/******/ 						return {
/******/ 							error: abortError
/******/ 						};
/******/ 					}
/******/ 					if (doApply) {
/******/ 						appliedUpdate[moduleId] = newModuleFactory;
/******/ 						addAllToSet(outdatedModules, result.outdatedModules);
/******/ 						for (moduleId in result.outdatedDependencies) {
/******/ 							if (__webpack_require__.o(result.outdatedDependencies, moduleId)) {
/******/ 								if (!outdatedDependencies[moduleId])
/******/ 									outdatedDependencies[moduleId] = [];
/******/ 								addAllToSet(
/******/ 									outdatedDependencies[moduleId],
/******/ 									result.outdatedDependencies[moduleId]
/******/ 								);
/******/ 							}
/******/ 						}
/******/ 					}
/******/ 					if (doDispose) {
/******/ 						addAllToSet(outdatedModules, [result.moduleId]);
/******/ 						appliedUpdate[moduleId] = warnUnexpectedRequire;
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 			currentUpdate = undefined;
/******/ 		
/******/ 			// Store self accepted outdated modules to require them later by the module system
/******/ 			var outdatedSelfAcceptedModules = [];
/******/ 			for (var j = 0; j < outdatedModules.length; j++) {
/******/ 				var outdatedModuleId = outdatedModules[j];
/******/ 				if (
/******/ 					__webpack_require__.c[outdatedModuleId] &&
/******/ 					__webpack_require__.c[outdatedModuleId].hot._selfAccepted &&
/******/ 					// removed self-accepted modules should not be required
/******/ 					appliedUpdate[outdatedModuleId] !== warnUnexpectedRequire &&
/******/ 					// when called invalidate self-accepting is not possible
/******/ 					!__webpack_require__.c[outdatedModuleId].hot._selfInvalidated
/******/ 				) {
/******/ 					outdatedSelfAcceptedModules.push({
/******/ 						module: outdatedModuleId,
/******/ 						require: __webpack_require__.c[outdatedModuleId].hot._requireSelf,
/******/ 						errorHandler: __webpack_require__.c[outdatedModuleId].hot._selfAccepted
/******/ 					});
/******/ 				}
/******/ 			}
/******/ 		
/******/ 			var moduleOutdatedDependencies;
/******/ 		
/******/ 			return {
/******/ 				dispose: function () {
/******/ 					currentUpdateRemovedChunks.forEach(function (chunkId) {
/******/ 						delete installedChunks[chunkId];
/******/ 					});
/******/ 					currentUpdateRemovedChunks = undefined;
/******/ 		
/******/ 					var idx;
/******/ 					var queue = outdatedModules.slice();
/******/ 					while (queue.length > 0) {
/******/ 						var moduleId = queue.pop();
/******/ 						var module = __webpack_require__.c[moduleId];
/******/ 						if (!module) continue;
/******/ 		
/******/ 						var data = {};
/******/ 		
/******/ 						// Call dispose handlers
/******/ 						var disposeHandlers = module.hot._disposeHandlers;
/******/ 						for (j = 0; j < disposeHandlers.length; j++) {
/******/ 							disposeHandlers[j].call(null, data);
/******/ 						}
/******/ 						__webpack_require__.hmrD[moduleId] = data;
/******/ 		
/******/ 						// disable module (this disables requires from this module)
/******/ 						module.hot.active = false;
/******/ 		
/******/ 						// remove module from cache
/******/ 						delete __webpack_require__.c[moduleId];
/******/ 		
/******/ 						// when disposing there is no need to call dispose handler
/******/ 						delete outdatedDependencies[moduleId];
/******/ 		
/******/ 						// remove "parents" references from all children
/******/ 						for (j = 0; j < module.children.length; j++) {
/******/ 							var child = __webpack_require__.c[module.children[j]];
/******/ 							if (!child) continue;
/******/ 							idx = child.parents.indexOf(moduleId);
/******/ 							if (idx >= 0) {
/******/ 								child.parents.splice(idx, 1);
/******/ 							}
/******/ 						}
/******/ 					}
/******/ 		
/******/ 					// remove outdated dependency from module children
/******/ 					var dependency;
/******/ 					for (var outdatedModuleId in outdatedDependencies) {
/******/ 						if (__webpack_require__.o(outdatedDependencies, outdatedModuleId)) {
/******/ 							module = __webpack_require__.c[outdatedModuleId];
/******/ 							if (module) {
/******/ 								moduleOutdatedDependencies =
/******/ 									outdatedDependencies[outdatedModuleId];
/******/ 								for (j = 0; j < moduleOutdatedDependencies.length; j++) {
/******/ 									dependency = moduleOutdatedDependencies[j];
/******/ 									idx = module.children.indexOf(dependency);
/******/ 									if (idx >= 0) module.children.splice(idx, 1);
/******/ 								}
/******/ 							}
/******/ 						}
/******/ 					}
/******/ 				},
/******/ 				apply: function (reportError) {
/******/ 					// insert new code
/******/ 					for (var updateModuleId in appliedUpdate) {
/******/ 						if (__webpack_require__.o(appliedUpdate, updateModuleId)) {
/******/ 							__webpack_require__.m[updateModuleId] = appliedUpdate[updateModuleId];
/******/ 						}
/******/ 					}
/******/ 		
/******/ 					// run new runtime modules
/******/ 					for (var i = 0; i < currentUpdateRuntime.length; i++) {
/******/ 						currentUpdateRuntime[i](__webpack_require__);
/******/ 					}
/******/ 		
/******/ 					// call accept handlers
/******/ 					for (var outdatedModuleId in outdatedDependencies) {
/******/ 						if (__webpack_require__.o(outdatedDependencies, outdatedModuleId)) {
/******/ 							var module = __webpack_require__.c[outdatedModuleId];
/******/ 							if (module) {
/******/ 								moduleOutdatedDependencies =
/******/ 									outdatedDependencies[outdatedModuleId];
/******/ 								var callbacks = [];
/******/ 								var dependenciesForCallbacks = [];
/******/ 								for (var j = 0; j < moduleOutdatedDependencies.length; j++) {
/******/ 									var dependency = moduleOutdatedDependencies[j];
/******/ 									var acceptCallback =
/******/ 										module.hot._acceptedDependencies[dependency];
/******/ 									if (acceptCallback) {
/******/ 										if (callbacks.indexOf(acceptCallback) !== -1) continue;
/******/ 										callbacks.push(acceptCallback);
/******/ 										dependenciesForCallbacks.push(dependency);
/******/ 									}
/******/ 								}
/******/ 								for (var k = 0; k < callbacks.length; k++) {
/******/ 									try {
/******/ 										callbacks[k].call(null, moduleOutdatedDependencies);
/******/ 									} catch (err) {
/******/ 										if (options.onErrored) {
/******/ 											options.onErrored({
/******/ 												type: "accept-errored",
/******/ 												moduleId: outdatedModuleId,
/******/ 												dependencyId: dependenciesForCallbacks[k],
/******/ 												error: err
/******/ 											});
/******/ 										}
/******/ 										if (!options.ignoreErrored) {
/******/ 											reportError(err);
/******/ 										}
/******/ 									}
/******/ 								}
/******/ 							}
/******/ 						}
/******/ 					}
/******/ 		
/******/ 					// Load self accepted modules
/******/ 					for (var o = 0; o < outdatedSelfAcceptedModules.length; o++) {
/******/ 						var item = outdatedSelfAcceptedModules[o];
/******/ 						var moduleId = item.module;
/******/ 						try {
/******/ 							item.require(moduleId);
/******/ 						} catch (err) {
/******/ 							if (typeof item.errorHandler === "function") {
/******/ 								try {
/******/ 									item.errorHandler(err);
/******/ 								} catch (err2) {
/******/ 									if (options.onErrored) {
/******/ 										options.onErrored({
/******/ 											type: "self-accept-error-handler-errored",
/******/ 											moduleId: moduleId,
/******/ 											error: err2,
/******/ 											originalError: err
/******/ 										});
/******/ 									}
/******/ 									if (!options.ignoreErrored) {
/******/ 										reportError(err2);
/******/ 									}
/******/ 									reportError(err);
/******/ 								}
/******/ 							} else {
/******/ 								if (options.onErrored) {
/******/ 									options.onErrored({
/******/ 										type: "self-accept-errored",
/******/ 										moduleId: moduleId,
/******/ 										error: err
/******/ 									});
/******/ 								}
/******/ 								if (!options.ignoreErrored) {
/******/ 									reportError(err);
/******/ 								}
/******/ 							}
/******/ 						}
/******/ 					}
/******/ 		
/******/ 					return outdatedModules;
/******/ 				}
/******/ 			};
/******/ 		}
/******/ 		__webpack_require__.hmrI.jsonp = function (moduleId, applyHandlers) {
/******/ 			if (!currentUpdate) {
/******/ 				currentUpdate = {};
/******/ 				currentUpdateRuntime = [];
/******/ 				currentUpdateRemovedChunks = [];
/******/ 				applyHandlers.push(applyHandler);
/******/ 			}
/******/ 			if (!__webpack_require__.o(currentUpdate, moduleId)) {
/******/ 				currentUpdate[moduleId] = __webpack_require__.m[moduleId];
/******/ 			}
/******/ 		};
/******/ 		__webpack_require__.hmrC.jsonp = function (
/******/ 			chunkIds,
/******/ 			removedChunks,
/******/ 			removedModules,
/******/ 			promises,
/******/ 			applyHandlers,
/******/ 			updatedModulesList
/******/ 		) {
/******/ 			applyHandlers.push(applyHandler);
/******/ 			currentUpdateChunks = {};
/******/ 			currentUpdateRemovedChunks = removedChunks;
/******/ 			currentUpdate = removedModules.reduce(function (obj, key) {
/******/ 				obj[key] = false;
/******/ 				return obj;
/******/ 			}, {});
/******/ 			currentUpdateRuntime = [];
/******/ 			chunkIds.forEach(function (chunkId) {
/******/ 				if (
/******/ 					__webpack_require__.o(installedChunks, chunkId) &&
/******/ 					installedChunks[chunkId] !== undefined
/******/ 				) {
/******/ 					promises.push(loadUpdateChunk(chunkId, updatedModulesList));
/******/ 					currentUpdateChunks[chunkId] = true;
/******/ 				}
/******/ 			});
/******/ 			if (__webpack_require__.f) {
/******/ 				__webpack_require__.f.jsonpHmr = function (chunkId, promises) {
/******/ 					if (
/******/ 						currentUpdateChunks &&
/******/ 						!__webpack_require__.o(currentUpdateChunks, chunkId) &&
/******/ 						__webpack_require__.o(installedChunks, chunkId) &&
/******/ 						installedChunks[chunkId] !== undefined
/******/ 					) {
/******/ 						promises.push(loadUpdateChunk(chunkId));
/******/ 						currentUpdateChunks[chunkId] = true;
/******/ 					}
/******/ 				};
/******/ 			}
/******/ 		};
/******/ 		
/******/ 		__webpack_require__.hmrM = () => {
/******/ 			if (typeof fetch === "undefined") throw new Error("No browser support: need fetch API");
/******/ 			return fetch(__webpack_require__.p + __webpack_require__.hmrF()).then((response) => {
/******/ 				if(response.status === 404) return; // no update available
/******/ 				if(!response.ok) throw new Error("Failed to fetch update manifest " + response.statusText);
/******/ 				return response.json();
/******/ 			});
/******/ 		};
/******/ 		
/******/ 		// no deferred startup
/******/ 		
/******/ 		// no jsonp function
/******/ 		
/******/ 		// no deferred startup
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// module cache are used so entry inlining is disabled
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	var __webpack_exports__ = __webpack_require__("./src/ts/main.ts");
/******/ 	
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,