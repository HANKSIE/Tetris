(()=>{"use strict";var e,t,r={962:function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var i=n(r(631)),o=n(r(971)),u=function(){function e(){}return e.create=function(e,t){return void 0===t&&(t=o.default.createMin()),new i.default(e,t)},e}();t.default=u},406:function(e,t,r){var n=this&&this.__spreadArrays||function(){for(var e=0,t=0,r=arguments.length;t<r;t++)e+=arguments[t].length;var n=Array(e),i=0;for(t=0;t<r;t++)for(var o=arguments[t],u=0,s=o.length;u<s;u++,i++)n[i]=o[u];return n};Object.defineProperty(t,"__esModule",{value:!0});var i=r(490),o=function(){function e(){}return e.create=function(e){for(var t,r=[],o=1;o<arguments.length;o++)r[o-1]=arguments[o];var u=new((t=i.Types[e]).bind.apply(t,n([void 0],r)));return u},e}();t.default=o},971:function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var i=n(r(758)),o=function(){function e(){}return e.create=function(e,t){return new i.default(e,t)},e.createByPoint=function(e){var t=e.x,r=e.y;return new i.default(t,r)},e.createMin=function(){return new i.default(Number.MIN_SAFE_INTEGER,Number.MIN_SAFE_INTEGER)},e}();t.default=o},518:function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var i=r(693),o=n(r(971)),u=function(){function e(){}return e.create=function(e){return new i.Types[e]},e.createRandom=function(t){for(var r=e.randomPickTetris(),n=Math.floor(t/2-r.width/2),i=Math.floor(4*Math.random()),u=0;u<i;u++)r.rotate();return r.update(),r.originPos=o.default.create(n,0),r},e.randomPickTetris=function(){var t=Object.keys(i.Types),r=t[Math.floor(Math.random()*t.length)];return e.create(r)},e}();t.default=u},140:function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.actions=void 0;var i=n(r(710)),o={keydown:[function(e,t){"ArrowLeft"===e.key&&t.currTetris.left()},function(e,t){"ArrowRight"===e.key&&t.currTetris.right()},function(e,t){"ArrowUp"===e.key&&t.currTetris.rotate()},function(e,t){"ArrowDown"===e.key&&(t.softDown||(t.downTimer.ms=t.downTimer.ms-t.speedIncrease,t.softDown=!0))},function(e,t){" "===e.key&&(t.downTimer.ms=0)},function(e,t){if("c"===e.key&&t.canHold){if(t.canHold=!1,t.holdTetris){var r=t.currTetris;t.currTetris=t.holdTetris,t.currTetris.posInitialize(),t.holdTetris=r,t.tetrises=t.tetrises.filter((function(e){return e!==t.holdTetris})),t.tetrises.push(t.currTetris)}else t.holdTetris=t.currTetris,i.default.updateCurrAndPrepare(t),t.tetrises=t.tetrises.filter((function(e){return e!==t.holdTetris})),t.currTetris.posInitialize(),t.holdTetris.posInitialize();t.holdWindow.render([t.holdTetris])}}],keyup:[function(e,t){"ArrowDown"===e.key&&t.softDown&&(t.downTimer.ms=t.downTimer.ms+t.speedIncrease,t.softDown=!1)}]};t.actions=o},710:function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var i=n(r(518)),o=r(645),u=n(r(256)),s=function(){function e(){}return e.clearCubes=function(e){e.downTimer.stop();var t=u.default.clear(e.gameWindow.width,e.gameWindow.height,e.tetrises);e.tetrises.forEach((function(e){e.cubes.forEach((function(e){var r=t.filter((function(t){return t>e.pos.y})).length;e.pos=e.pos.plusY(r)}))})),e.downTimer.start()},e.updateCurrAndPrepare=function(t){t.currTetris=t.prepareTetrises.shift(),t.tetrises.push(t.currTetris),t.prepareTetrises.push(i.default.createRandom(t.gameWindow.width)),e.renderPrepareWindow(t)},e.windowInit=function(e){e.gameWindow.clear(),e.gameWindow.renderGrid(),e.prepareWindow.forEach((function(e){return e.clear()})),e.holdWindow.clear()},e.renderPrepareWindow=function(e){e.prepareWindow.forEach((function(t,r){t.render([e.prepareTetrises[r]])}))},e.currTetrisDown=function(e){e.currTetris.down()},e.nextTick=function(t,r){if(void 0===r&&(r=!1),t.collision.isCollision(t.currTetris,t.tetrises)){if(r){if(t.downTimer.ms=t.downInterval,0===t.currTetris.cubes.filter((function(e){return e.pos.y>=0})).length)return t.gameWindow.renderTetris(t.tetrises),void(t.gameover=!0);e.clearCubes(t),e.updateCurrAndPrepare(t),t.softDown=!1,t.canHold=!0;var n=e.upAmount(t);if(n>0)return t.currTetris.up(n),t.currTetris.update(),void t.gameWindow.renderTetris(t.tetrises)}t.currTetris.back()}else t.currTetris.update()},e.upAmount=function(e){var t=e.currTetris,r=e.tetrises,n=Number.MAX_SAFE_INTEGER,i=0;r.forEach((function(e){e!==t&&e.cubes.forEach((function(e){e.pos.y<n&&(n=e.pos.y)}))}));for(var u=t.currentShape,s=t.width,c=t.height-1,a=t.pos.y+t.height,f=c;f>=0;f--)for(var d=0;d<s&&u[f][d]!==o.ShapeValue.DEFINED;d++);return n<=a&&(i=Math.abs(a-n)+1),i},e}();t.default=s},377:(e,t)=>{var r;Object.defineProperty(t,"__esModule",{value:!0}),t.BoundaryType=void 0,function(e){e[e.Top=0]="Top",e[e.Bottom=1]="Bottom",e[e.Left=2]="Left",e[e.Right=3]="Right"}(r=t.BoundaryType||(t.BoundaryType={}));var n=function(){function e(e,t){void 0===t&&(t=[]),this._boundary=e,this._ignore=t}return e.prototype.isCollisionTetris=function(e,t){for(var r=0;r<t.length;r++){var n=t[r];if(n!==e)for(var i=0;i<e.nextCubes.length;i++)if(n.findCubeByPos(e.nextCubes[i].pos))return!0}return!1},e.prototype.isCollisionBoundary=function(e){for(var t=this._boundary,n=t.top,i=t.bottom,o=t.left,u=t.right,s=0;s<e.nextCubes.length;s++){var c=e.nextCubes[s].pos,a=c.x,f=c.y;if(a<o&&!this._ignore.includes(r.Left)||a>u&&!this._ignore.includes(r.Right)||f<n&&!this._ignore.includes(r.Top)||f>i&&!this._ignore.includes(r.Bottom))return!0}return!1},e.prototype.isCollision=function(e,t){return this.isCollisionBoundary(e)||this.isCollisionTetris(e,t)},e}();t.default=n},433:function(e,t,r){var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&n(t,e,r);return i(t,e),t},u=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var s=u(r(518)),c=u(r(10)),a=o(r(377));t.default=function(e,t,r,n){var i=this;this.downInterval=450,this.renderInterval=50,this.speedIncrease=400,this.tetrises=[],this.prepareTetrises=[],this.holdTetris=null,this.softDown=!1,this.canHold=!0,this.gameover=!1,this.gameWindow=e,this.prepareWindow=t,this.holdWindow=r,this.currTetris=s.default.createRandom(this.gameWindow.width),this.tetrises.push(this.currTetris);for(var o=0;o<this.prepareWindow.length;o++)this.prepareTetrises.push(s.default.createRandom(this.gameWindow.width));this.downTimer=new c.default((function(){n()}),this.downInterval),this.renderTimer=new c.default((function(){i.gameWindow.render(i.tetrises)}),this.renderInterval),this.collision=new a.default({top:0,bottom:e.height-1,left:0,right:e.width-1},[a.BoundaryType.Top])}},256:function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var i=n(r(52)),o=function(){function e(){}return e.clear=function(t,r,n){var i=e.clearableCubes(t,r,n);return e.removeClearableTetris(n),i},e.clearableCubes=function(e,t,r){var n=i.default.create2D(t),o=[];return r.forEach((function(e){e.cubes.forEach((function(e){!e.isClear&&e.pos.y>=0&&n[e.pos.y].push(e)}))})),n.forEach((function(t,r){t.length===e&&(t.forEach((function(e){e.isClear=!0})),o.push(r))})),o},e.removeClearableTetris=function(e){e.forEach((function(t){0===t.cubes.filter((function(e){return!1===e.isClear})).length&&(e=e.filter((function(e){return e!==t})))}))},e}();t.default=o},568:function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var i=n(r(433)),o=n(r(710)),u=r(140),s=function(){function e(e,t,r){var n=this;this.userKeyDownBehavior=function(e){u.actions.keydown.forEach((function(t){t(e,n._context)})),o.default.nextTick(n._context)},this.userKeyUpBehavior=function(e){u.actions.keyup.forEach((function(t){t(e,n._context)})),o.default.nextTick(n._context)},this.update=function(){o.default.currTetrisDown(n._context),o.default.nextTick(n._context,!0),n._context.gameover&&(n.stop(),alert("gameover"))},this._context=new i.default(e,t,r,this.update)}return e.prototype.registerUserBehavior=function(){document.addEventListener("keydown",this.userKeyDownBehavior),document.addEventListener("keyup",this.userKeyUpBehavior)},e.prototype.removeUserBehavior=function(){document.removeEventListener("keydown",this.userKeyDownBehavior),document.removeEventListener("keyup",this.userKeyUpBehavior)},e.prototype.start=function(){this._context.gameover&&this.initialize(),this._context.downTimer.start(),this._context.renderTimer.start(),o.default.renderPrepareWindow(this._context),this.registerUserBehavior()},e.prototype.stop=function(){this._context.downTimer.stop(),this._context.renderTimer.stop(),this.removeUserBehavior()},e.prototype.initialize=function(){var e=this._context,t=e.gameWindow,r=e.prepareWindow,n=e.holdWindow;this._context=new i.default(t,r,n,this.update),o.default.windowInit(this._context),this.removeUserBehavior()},e}();t.default=s},490:function(e,t,r){var n,i=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Types=t.HoldWindow=t.PrepareWindow=t.MainWindow=void 0;var u=o(r(517)),s=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.renderTetris=function(e){var t=this;this._context.strokeStyle="#555555",e.forEach((function(e){e.cubes.forEach((function(r){if(!r.isClear){var n=r.pos;t._context.beginPath();var i=n.x*t._unit,o=n.y*t._unit;t._context.rect(i,o,t._unit,t._unit),t._context.fillStyle=e.color,t._context.fill(),t._context.stroke()}}))}))},t.prototype.resize=function(){var e=this.width*this._unit,t=this.height*this._unit;this._canvas.setAttribute("width",e.toString()),this._canvas.setAttribute("height",t.toString())},t.prototype.renderDefine=function(e){this.renderTetris(e),this.renderGrid()},t.prototype.initialize=function(){this.resize(),this.renderGrid()},t}(u.default);t.MainWindow=s;var c=function(e){function t(t,r){return e.call(this,t,0,0,r)||this}return i(t,e),t.prototype.renderTetris=function(e){var t=this,r=e[0];this._context.strokeStyle="#555555",r.cubes.forEach((function(e){var n=r.pos,i=e.pos;t._context.beginPath();var o=(i.x-n.x)*t._unit,u=(i.y-n.y)*t._unit;t._context.rect(o,u,t._unit,t._unit),t._context.fillStyle=r.color,t._context.fill(),t._context.stroke()}))},t.prototype.resize=function(e){var t=e.originWidth*this._unit,r=e.originHeight*this._unit;this._canvas.setAttribute("width",t.toString()),this._canvas.setAttribute("height",r.toString())},t.prototype.renderDefine=function(e){this.resize(e[0]),this.renderTetris(e)},t}(u.default),a=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t}(c);t.PrepareWindow=a;var f=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t}(c);t.HoldWindow=f,t.Types={MainWindow:s,PrepareWindow:a,HoldWindow:f}},517:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t,r,n){this._canvas=e,this._context=e.getContext("2d"),this._width=t,this._height=r,this._unit=n}return Object.defineProperty(e.prototype,"width",{get:function(){return this._width},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"height",{get:function(){return this._height},enumerable:!1,configurable:!0}),e.prototype.renderGrid=function(){this._context.strokeStyle="#777777";for(var e=0;e<this.height;e++)this._context.beginPath(),this._context.moveTo(0,e*this._unit+this._unit),this._context.lineTo(this.width*this._unit,e*this._unit+this._unit),this._context.stroke();for(var t=0;t<this.width;t++)this._context.beginPath(),this._context.moveTo(t*this._unit+this._unit,0),this._context.lineTo(t*this._unit+this._unit,this._canvas.height),this._context.stroke()},e.prototype.render=function(e){this.clear(),this.renderDefine(e)},e.prototype.clear=function(){this._context.clearRect(0,0,this._canvas.width,this._canvas.height)},e}();t.default=r},52:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(){}return e.create2D=function(e,t,r){for(var n=[],i=0;i<e;i++)n.push([]),t&&r&&(n[i]=new Array(t).fill(r));return n},e}();t.default=r},299:function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var i=n(r(406)),o=r(490),u=n(r(568));window.addEventListener("keydown",(function(e){["ArrowUp","ArrowDown","ArrowLeft","ArrowRight"," "].includes(e.key)&&e.preventDefault()}));var s=document.querySelector("#gameWindow"),c=document.querySelectorAll("#next-area > .canvas-wrapper > canvas"),a=document.querySelector("#hold"),f=document.querySelector("#start"),d=document.querySelector("#stop"),l=document.querySelector("#reset"),h=i.default.create(o.MainWindow.name,s,14,24,20),p=[];c.forEach((function(e){e.setAttribute("height",52..toString()),e.setAttribute("height",52..toString()),p.push(i.default.create(o.PrepareWindow.name,e,13))})),a.setAttribute("height",52..toString()),a.setAttribute("height",52..toString());var _=i.default.create(o.HoldWindow.name,a,13);h.initialize();var y=new u.default(h,p,_);f.addEventListener("click",(function(){y.start(),f.style.color="white",d.style.color="#888888",l.style.color="#888888"})),d.addEventListener("click",(function(){y.stop(),d.style.color="white",f.style.color="#888888",l.style.color="#888888"})),l.addEventListener("click",(function(e){y.stop(),y.initialize(),l.style.color="white",f.style.color="#888888",d.style.color="#888888"})),window.addEventListener("keydown",(function(e){"p"===e.key&&d.click(),"Enter"===e.key&&f.click(),"r"===e.key&&l.click()}))},758:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){this._x=e,this._y=t}return Object.defineProperty(e.prototype,"x",{get:function(){return this._x},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"y",{get:function(){return this._y},enumerable:!1,configurable:!0}),e.prototype.plus=function(t){return new e(this._x+t.x,this._y+t.y)},e.prototype.plusWith=function(t,r){return new e(this._x+t,this._y+r)},e.prototype.subtract=function(t){return new e(this._x-t.x,this._y-t.y)},e.prototype.subtractWith=function(t,r){return new e(this._x-t,this._y-r)},e.prototype.plusX=function(t){return new e(this._x+t,this.y)},e.prototype.plusY=function(t){return new e(this.x,this._y+t)},e.prototype.subtractX=function(t){return new e(this._x-t,this.y)},e.prototype.subtractY=function(t){return new e(this.x,this._y-t)},e.prototype.equal=function(e){return this.x===e.x&&this.y===e.y},e}();t.default=r},10:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){this._timerID=null,this._ms=t,this._handle=e}return Object.defineProperty(e.prototype,"ms",{get:function(){return this._ms},set:function(e){this._ms=e,this.stop(),this.start()},enumerable:!1,configurable:!0}),e.prototype.start=function(){this._timerID||(this._timerID=setInterval(this._handle,this._ms))},e.prototype.stop=function(){this._timerID&&(clearInterval(this._timerID),this._timerID=null)},e}();t.default=r},693:function(e,t,r){var n,i=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Types=t.ZTetris=t.TTetris=t.STetris=t.OTetris=t.LTetris=t.JTetris=t.ITetris=void 0;var u=o(r(645)),s=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.colorDefine=function(){return"#42b0f5"},t.prototype.shapeDefine=function(){return[[0,0,0,0],[1,1,1,1],[0,0,0,0],[0,0,0,0]]},t}(u.default);t.ITetris=s;var c=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.colorDefine=function(){return"#3874ff"},t.prototype.shapeDefine=function(){return[[1,0,0],[1,1,1],[0,0,0]]},t}(u.default);t.JTetris=c;var a=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.colorDefine=function(){return"#ff8e24"},t.prototype.shapeDefine=function(){return[[0,0,1],[1,1,1],[0,0,0]]},t}(u.default);t.LTetris=a;var f=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.colorDefine=function(){return"#fff242"},t.prototype.shapeDefine=function(){return[[1,1],[1,1]]},t}(u.default);t.OTetris=f;var d=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.colorDefine=function(){return"#00de3f"},t.prototype.shapeDefine=function(){return[[0,1,1],[1,1,0],[0,0,0]]},t}(u.default);t.STetris=d;var l=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.colorDefine=function(){return"#e557f7"},t.prototype.shapeDefine=function(){return[[0,1,0],[1,1,1],[0,0,0]]},t}(u.default);t.TTetris=l;var h=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.colorDefine=function(){return"#ff1f1f"},t.prototype.shapeDefine=function(){return[[1,1,0],[0,1,1],[0,0,0]]},t}(u.default);t.ZTetris=h,t.Types={ITetris:s,JTetris:c,LTetris:a,OTetris:f,STetris:d,TTetris:l,ZTetris:h}},631:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});t.default=function(e,t){this.isClear=!1,this.relationPos=e,this.pos=t}},645:function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ShapeValue=void 0;var i,o=n(r(962)),u=n(r(971)),s=n(r(52));!function(e){e[e.UNDEFINED=-1]="UNDEFINED",e[e.DEFINED=1]="DEFINED",e[e.EMPTY=0]="EMPTY"}(i=t.ShapeValue||(t.ShapeValue={}));var c=function(){function e(){this._originPos=u.default.createMin(),this._pos=u.default.createMin(),this._nextPos=u.default.createByPoint(this.pos),this._cubes=[],this._color=this.colorDefine(),this._originShape=this.shapeDefine(),this._nextShape=this._originShape.slice(),this._currentShape=this._originShape.slice()}return Object.defineProperty(e.prototype,"width",{get:function(){return this._currentShape[0].length},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"height",{get:function(){return this._currentShape.length},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"pos",{get:function(){return this._pos},set:function(e){this._pos=e,this._cubes=this.generateCubes(this.pos,this._currentShape)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"originPos",{get:function(){return this._originPos},set:function(e){this.originPos.x===Number.MIN_SAFE_INTEGER&&this.originPos.y===Number.MIN_SAFE_INTEGER&&(this._originPos=u.default.createByPoint(e),this.pos=u.default.createByPoint(e),this._nextPos=u.default.createByPoint(e))},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"originWidth",{get:function(){return this._originShape[0].length},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"originHeight",{get:function(){return this._originShape.length},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"cubes",{get:function(){return this._cubes},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"nextCubes",{get:function(){return this.generateCubes(this._nextPos,this._nextShape)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"color",{get:function(){return this._color},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"currentShape",{get:function(){return this._currentShape.slice()},enumerable:!1,configurable:!0}),e.prototype.generateCubes=function(e,t){var r=[];return t.forEach((function(t,n){t.forEach((function(t,s){if(t===i.DEFINED){var c=u.default.create(s,n),a=c.plus(e);r.push(o.default.create(c,a))}}))})),r},e.prototype.findCubeByPos=function(e,t){return void 0===t&&(t=!1),this._cubes.find((function(r){return r.pos.equal(e)&&r.isClear===t}))},e.prototype.findCube=function(e){return this._cubes.find((function(t){return t===e}))},e.prototype.rotate=function(){for(var e=this.height,t=this.width,r=s.default.create2D(t,e,i.EMPTY),n=0,c=0;c<e;c++){n=0;for(var a=0;a<t;a++){var f=this._currentShape[c][a];r[n][e-c-1]=f,f===i.DEFINED&&this.findCubeByPos(u.default.create(a,c))&&(o.default.create(u.default.create(c,n)).pos=this.pos.plusWith(c,a)),n++}}this._nextShape=r},e.prototype.left=function(e){void 0===e&&(e=1),this._nextPos=this._nextPos.subtractX(e)},e.prototype.right=function(e){void 0===e&&(e=1),this._nextPos=this._nextPos.plusX(e)},e.prototype.up=function(e){void 0===e&&(e=1),this._nextPos=this._nextPos.subtractY(e)},e.prototype.down=function(e){void 0===e&&(e=1),this._nextPos=this._nextPos.plusY(e)},e.prototype.update=function(){this._currentShape=this._nextShape.slice(),this.pos=u.default.createByPoint(this._nextPos),this._nextPos=u.default.createByPoint(this.pos)},e.prototype.back=function(){this._nextShape=this._currentShape.slice(),this._nextPos=u.default.createByPoint(this.pos)},e.prototype.posInitialize=function(){this.pos=u.default.createByPoint(this.originPos),this._nextPos=u.default.createByPoint(this.originPos)},e}();t.default=c}},n={};function i(e){if(n[e])return n[e].exports;var t=n[e]={exports:{}},o={id:e,module:t,factory:r[e],require:i};return i.i.forEach((function(e){e(o)})),t=o.module,o.factory.call(t.exports,t,t.exports,o.require),t.exports}i.m=r,i.c=n,i.i=[],i.hu=e=>e+"."+i.h()+".hot-update.js",i.hmrF=()=>"main."+i.h()+".hot-update.json",i.h=()=>"dad968e46981f8a958b4",i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),i.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),e={},t="Tetris:",i.l=(r,n,o,u)=>{if(e[r])e[r].push(n);else{var s,c;if(void 0!==o)for(var a=document.getElementsByTagName("script"),f=0;f<a.length;f++){var d=a[f];if(d.getAttribute("src")==r||d.getAttribute("data-webpack")==t+o){s=d;break}}s||(c=!0,(s=document.createElement("script")).charset="utf-8",s.timeout=120,i.nc&&s.setAttribute("nonce",i.nc),s.setAttribute("data-webpack",t+o),s.src=r),e[r]=[n];var l=(t,n)=>{s.onerror=s.onload=null,clearTimeout(h);var i=e[r];if(delete e[r],s.parentNode&&s.parentNode.removeChild(s),i&&i.forEach((e=>e(n))),t)return t(n)},h=setTimeout(l.bind(null,void 0,{type:"timeout",target:s}),12e4);s.onerror=l.bind(null,s.onerror),s.onload=l.bind(null,s.onload),c&&document.head.appendChild(s)}},(()=>{var e,t,r,n,o={},u=i.c,s=[],c=[],a="idle";function f(e){a=e;for(var t=0;t<c.length;t++)c[t].call(null,e)}function d(e){if(0===t.length)return e();var r=t;return t=[],Promise.all(r).then((function(){return d(e)}))}function l(e){if("idle"!==a)throw new Error("check() is only allowed in idle status");return f("check"),i.hmrM().then((function(n){if(!n)return f(_()?"ready":"idle"),null;f("prepare");var o=[];return t=[],r=[],Promise.all(Object.keys(i.hmrC).reduce((function(e,t){return i.hmrC[t](n.c,n.r,n.m,e,r,o),e}),[])).then((function(){return d((function(){return e?p(e):(f("ready"),o)}))}))}))}function h(e){return"ready"!==a?Promise.resolve().then((function(){throw new Error("apply() is only allowed in ready status")})):p(e)}function p(e){e=e||{},_();var t=r.map((function(t){return t(e)}));r=void 0;var i,o=t.map((function(e){return e.error})).filter(Boolean);if(o.length>0)return f("abort"),Promise.resolve().then((function(){throw o[0]}));f("dispose"),t.forEach((function(e){e.dispose&&e.dispose()})),f("apply");var u=function(e){i||(i=e)},s=[];return t.forEach((function(e){if(e.apply){var t=e.apply(u);if(t)for(var r=0;r<t.length;r++)s.push(t[r])}})),i?(f("fail"),Promise.resolve().then((function(){throw i}))):n?p(e).then((function(e){return s.forEach((function(t){e.indexOf(t)<0&&e.push(t)})),e})):(f("idle"),Promise.resolve(s))}function _(){if(n)return r||(r=[]),Object.keys(i.hmrI).forEach((function(e){n.forEach((function(t){i.hmrI[e](t,r)}))})),n=void 0,!0}i.hmrD=o,i.i.push((function(p){var _,y,v,m=p.module,b=function(r,n){var i=u[n];if(!i)return r;var o=function(t){if(i.hot.active){if(u[t]){var o=u[t].parents;-1===o.indexOf(n)&&o.push(n)}else s=[n],e=t;-1===i.children.indexOf(t)&&i.children.push(t)}else console.warn("[HMR] unexpected require("+t+") from disposed module "+n),s=[];return r(t)},c=function(e){return{configurable:!0,enumerable:!0,get:function(){return r[e]},set:function(t){r[e]=t}}};for(var l in r)Object.prototype.hasOwnProperty.call(r,l)&&"e"!==l&&Object.defineProperty(o,l,c(l));return o.e=function(e){return function(e){switch(a){case"ready":return f("prepare"),t.push(e),d((function(){f("ready")})),e;case"prepare":return t.push(e),e;default:return e}}(r.e(e))},o}(p.require,p.id);m.hot=(_=p.id,y=m,v={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:e!==_,_requireSelf:function(){s=y.parents.slice(),e=_,i(_)},active:!0,accept:function(e,t){if(void 0===e)v._selfAccepted=!0;else if("function"==typeof e)v._selfAccepted=e;else if("object"==typeof e&&null!==e)for(var r=0;r<e.length;r++)v._acceptedDependencies[e[r]]=t||function(){};else v._acceptedDependencies[e]=t||function(){}},decline:function(e){if(void 0===e)v._selfDeclined=!0;else if("object"==typeof e&&null!==e)for(var t=0;t<e.length;t++)v._declinedDependencies[e[t]]=!0;else v._declinedDependencies[e]=!0},dispose:function(e){v._disposeHandlers.push(e)},addDisposeHandler:function(e){v._disposeHandlers.push(e)},removeDisposeHandler:function(e){var t=v._disposeHandlers.indexOf(e);t>=0&&v._disposeHandlers.splice(t,1)},invalidate:function(){switch(this._selfInvalidated=!0,a){case"idle":r=[],Object.keys(i.hmrI).forEach((function(e){i.hmrI[e](_,r)})),f("ready");break;case"ready":Object.keys(i.hmrI).forEach((function(e){i.hmrI[e](_,r)}));break;case"prepare":case"check":case"dispose":case"apply":(n=n||[]).push(_)}},check:l,apply:h,status:function(e){if(!e)return a;c.push(e)},addStatusHandler:function(e){c.push(e)},removeStatusHandler:function(e){var t=c.indexOf(e);t>=0&&c.splice(t,1)},data:o[_]},e=void 0,v),m.parents=s,m.children=[],s=[],p.require=b})),i.hmrC={},i.hmrI={}})(),(()=>{var e;i.g.importScripts&&(e=i.g.location+"");var t=i.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),i.p=e})(),(()=>{var e,t,r,n,o={179:0},u={};function s(e){return new Promise(((t,r)=>{u[e]=t;var n=i.p+i.hu(e),o=new Error;i.l(n,(t=>{if(u[e]){u[e]=void 0;var n=t&&("load"===t.type?"missing":t.type),i=t&&t.target&&t.target.src;o.message="Loading hot update chunk "+e+" failed.\n("+n+": "+i+")",o.name="ChunkLoadError",o.type=n,o.request=i,r(o)}}))}))}function c(u){function s(e){for(var t=[e],r={},n=t.map((function(e){return{chain:[e],id:e}}));n.length>0;){var o=n.pop(),u=o.id,s=o.chain,a=i.c[u];if(a&&(!a.hot._selfAccepted||a.hot._selfInvalidated)){if(a.hot._selfDeclined)return{type:"self-declined",chain:s,moduleId:u};if(a.hot._main)return{type:"unaccepted",chain:s,moduleId:u};for(var f=0;f<a.parents.length;f++){var d=a.parents[f],l=i.c[d];if(l){if(l.hot._declinedDependencies[u])return{type:"declined",chain:s.concat([d]),moduleId:u,parentId:d};-1===t.indexOf(d)&&(l.hot._acceptedDependencies[u]?(r[d]||(r[d]=[]),c(r[d],[u])):(delete r[d],t.push(d),n.push({chain:s.concat([d]),id:d})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:r}}function c(e,t){for(var r=0;r<t.length;r++){var n=t[r];-1===e.indexOf(n)&&e.push(n)}}i.f&&delete i.f.jsonpHmr,e=void 0;var a={},f=[],d={},l=function(e){console.warn("[HMR] unexpected require("+e.id+") to disposed module")};for(var h in t)if(i.o(t,h)){var p,_=t[h],y=!1,v=!1,m=!1,b="";switch((p=_?s(h):{type:"disposed",moduleId:h}).chain&&(b="\nUpdate propagation: "+p.chain.join(" -> ")),p.type){case"self-declined":u.onDeclined&&u.onDeclined(p),u.ignoreDeclined||(y=new Error("Aborted because of self decline: "+p.moduleId+b));break;case"declined":u.onDeclined&&u.onDeclined(p),u.ignoreDeclined||(y=new Error("Aborted because of declined dependency: "+p.moduleId+" in "+p.parentId+b));break;case"unaccepted":u.onUnaccepted&&u.onUnaccepted(p),u.ignoreUnaccepted||(y=new Error("Aborted because "+h+" is not accepted"+b));break;case"accepted":u.onAccepted&&u.onAccepted(p),v=!0;break;case"disposed":u.onDisposed&&u.onDisposed(p),m=!0;break;default:throw new Error("Unexception type "+p.type)}if(y)return{error:y};if(v)for(h in d[h]=_,c(f,p.outdatedModules),p.outdatedDependencies)i.o(p.outdatedDependencies,h)&&(a[h]||(a[h]=[]),c(a[h],p.outdatedDependencies[h]));m&&(c(f,[p.moduleId]),d[h]=l)}t=void 0;for(var g,w=[],T=0;T<f.length;T++){var x=f[T];i.c[x]&&i.c[x].hot._selfAccepted&&d[x]!==l&&!i.c[x].hot._selfInvalidated&&w.push({module:x,require:i.c[x].hot._requireSelf,errorHandler:i.c[x].hot._selfAccepted})}return{dispose:function(){var e;r.forEach((function(e){delete o[e]})),r=void 0;for(var t,n=f.slice();n.length>0;){var u=n.pop(),s=i.c[u];if(s){var c={},d=s.hot._disposeHandlers;for(T=0;T<d.length;T++)d[T].call(null,c);for(i.hmrD[u]=c,s.hot.active=!1,delete i.c[u],delete a[u],T=0;T<s.children.length;T++){var l=i.c[s.children[T]];l&&(e=l.parents.indexOf(u))>=0&&l.parents.splice(e,1)}}}for(var h in a)if(i.o(a,h)&&(s=i.c[h]))for(g=a[h],T=0;T<g.length;T++)t=g[T],(e=s.children.indexOf(t))>=0&&s.children.splice(e,1)},apply:function(e){for(var t in d)i.o(d,t)&&(i.m[t]=d[t]);for(var r=0;r<n.length;r++)n[r](i);for(var o in a)if(i.o(a,o)){var s=i.c[o];if(s){g=a[o];for(var c=[],l=[],h=0;h<g.length;h++){var p=g[h],_=s.hot._acceptedDependencies[p];if(_){if(-1!==c.indexOf(_))continue;c.push(_),l.push(p)}}for(var y=0;y<c.length;y++)try{c[y].call(null,g)}catch(t){u.onErrored&&u.onErrored({type:"accept-errored",moduleId:o,dependencyId:l[y],error:t}),u.ignoreErrored||e(t)}}}for(var v=0;v<w.length;v++){var m=w[v],b=m.module;try{m.require(b)}catch(t){if("function"==typeof m.errorHandler)try{m.errorHandler(t)}catch(r){u.onErrored&&u.onErrored({type:"self-accept-error-handler-errored",moduleId:b,error:r,originalError:t}),u.ignoreErrored||e(r),e(t)}else u.onErrored&&u.onErrored({type:"self-accept-errored",moduleId:b,error:t}),u.ignoreErrored||e(t)}}return f}}}self.webpackHotUpdateTetris=(e,r,o)=>{for(var s in r)i.o(r,s)&&(t[s]=r[s]);o&&n.push(o),u[e]&&(u[e](),u[e]=void 0)},i.hmrI.jsonp=function(e,o){t||(t={},n=[],r=[],o.push(c)),i.o(t,e)||(t[e]=i.m[e])},i.hmrC.jsonp=function(u,a,f,d,l,h){l.push(c),e={},r=a,t=f.reduce((function(e,t){return e[t]=!1,e}),{}),n=[],u.forEach((function(t){i.o(o,t)&&void 0!==o[t]&&(d.push(s(t)),e[t]=!0)})),i.f&&(i.f.jsonpHmr=function(t,r){e&&!i.o(e,t)&&i.o(o,t)&&void 0!==o[t]&&(r.push(s(t)),e[t]=!0)})},i.hmrM=()=>{if("undefined"==typeof fetch)throw new Error("No browser support: need fetch API");return fetch(i.p+i.hmrF()).then((e=>{if(404!==e.status){if(!e.ok)throw new Error("Failed to fetch update manifest "+e.statusText);return e.json()}}))}})(),i(299)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,